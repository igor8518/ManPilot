#pragma once
#include <PMDG_NGX_SDK.h>
#include <vector>
static class PMDG_EVENT
{
public:
	const char * szEventName;
	int eventID;
};

static const std::vector<PMDG_EVENT> PMDGEventArray{

{ "EVT_OH_ELEC_BATTERY_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 1)},	    // 01 - BAT Switch
{ "EVT_OH_ELEC_BATTERY_GUARD				", (THIRD_PARTY_EVENT_ID_MIN + 2)},		// 02 - BAT Switch Guard 
{ "EVT_OH_ELEC_DC_METER					", (THIRD_PARTY_EVENT_ID_MIN + 3)},		// 03 - DC SOURCE Knob					
{ "EVT_OH_ELEC_AC_METER					", (THIRD_PARTY_EVENT_ID_MIN + 4)},		// 04 - AC SOURCE Knob					
{ "EVT_OH_ELEC_GALLEY						", (THIRD_PARTY_EVENT_ID_MIN + 974)},	// 974- GALLEY Switch [-600/700 only]				
{ "EVT_OH_ELEC_CAB_UTIL					", (THIRD_PARTY_EVENT_ID_MIN + 5)},		// 05 - CAB UTIL Switch	[-800/900 only]			
{ "EVT_OH_ELEC_IFE							", (THIRD_PARTY_EVENT_ID_MIN + 6)},		// 06 - IFE/PASS Switch	[-800/900 only]
{ "EVT_OH_ELEC_STBY_PWR_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 10)},	    // 10 - STANDBY POWER Switch 
{ "EVT_OH_ELEC_STBY_PWR_GUARD				", (THIRD_PARTY_EVENT_ID_MIN + 11)},		// 11 - STANDBY POWER Switch Guard
{ "EVT_OH_ELEC_DISCONNECT_1_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 12)},		// 12 - GEN DRIVE DISC Left Switch		
{ "EVT_OH_ELEC_DISCONNECT_1_GUARD			", (THIRD_PARTY_EVENT_ID_MIN + 13)},		// 13 - GEN DRIVE DISC Left Guard		
{ "EVT_OH_ELEC_DISCONNECT_2_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 14)},		// 14 - GEN DRIVE DISC Right Switch	
{ "EVT_OH_ELEC_DISCONNECT_2_GUARD			", (THIRD_PARTY_EVENT_ID_MIN + 15)},		// 15 - GEN DRIVE DISC Right Guard 	
{ "EVT_OH_ELEC_GRD_PWR_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 17)},		// 17 - GROUND POWER Switch
{ "EVT_OH_ELEC_BUS_TRANSFER_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 18)},		// 18 - BUS TRANSFER Switch 	
{ "EVT_OH_ELEC_BUS_TRANSFER_GUARD			", (THIRD_PARTY_EVENT_ID_MIN + 19)},		// 19 - BUS TRANSFER Guard
{ "EVT_OH_ELEC_GEN1_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 27)},		// 27 - GENERATOR Left Switch
{ "EVT_OH_ELEC_APU_GEN1_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 28)},		// 28 - APU GENERATOR Left Switch
{ "EVT_OH_ELEC_APU_GEN2_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 29)},		// 29 - APU GENERATOR RIGHT Switch
{ "EVT_OH_ELEC_GEN2_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 30)},		// 30 - GENERATOR RIGHT Switch
{ "EVT_OH_ELEC_MAINT_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 93)},		// 93 - ELEC MAINT Switch 

// Overhead - FUEL Panel
{ "EVT_OH_FUEL_PUMP_1_AFT						", (THIRD_PARTY_EVENT_ID_MIN + 37)},		// 37 - FUEL PUMP LEFT AFT Switch 
{ "EVT_OH_FUEL_PUMP_1_FORWARD					", (THIRD_PARTY_EVENT_ID_MIN + 38)},		// 38 - FUEL PUMP LEFT FWD Switch 
{ "EVT_OH_FUEL_PUMP_2_FORWARD					", (THIRD_PARTY_EVENT_ID_MIN + 39)},		// 39 - FUEL PUMP RIGHT FWD Switch 
{ "EVT_OH_FUEL_PUMP_2_AFT						", (THIRD_PARTY_EVENT_ID_MIN + 40)},		// 40 - FUEL PUMP RIGHT AFT Switch 
{ "EVT_OH_FUEL_PUMP_L_CENTER					", (THIRD_PARTY_EVENT_ID_MIN + 45)},		// 45 - FUEL PUMP CENTER LEFT Switch 
{ "EVT_OH_FUEL_PUMP_R_CENTER					", (THIRD_PARTY_EVENT_ID_MIN + 46)},		// 46 - FUEL PUMP CENTER LEFT Switch 
{ "EVT_OH_FUEL_CROSSFEED						", (THIRD_PARTY_EVENT_ID_MIN + 49)},		// 49 - CROSSFEED Selector 

// Overhead - LIGHTS Panel
{ "EVT_OH_LAND_LIGHTS_GUARD					", (THIRD_PARTY_EVENT_ID_MIN + 110)},
{ "EVT_OH_LIGHTS_L_RETRACT						", (THIRD_PARTY_EVENT_ID_MIN + 111)},
{ "EVT_OH_LIGHTS_R_RETRACT						", (THIRD_PARTY_EVENT_ID_MIN + 112)},
{ "EVT_OH_LIGHTS_L_FIXED						", (THIRD_PARTY_EVENT_ID_MIN + 113)},
{ "EVT_OH_LIGHTS_R_FIXED						", (THIRD_PARTY_EVENT_ID_MIN + 114)},
{ "EVT_OH_LIGHTS_L_TURNOFF						", (THIRD_PARTY_EVENT_ID_MIN + 115)},
{ "EVT_OH_LIGHTS_R_TURNOFF						", (THIRD_PARTY_EVENT_ID_MIN + 116)},
{ "EVT_OH_LIGHTS_TAXI							", (THIRD_PARTY_EVENT_ID_MIN + 117)},
{ "EVT_OH_LIGHTS_APU_START						", (THIRD_PARTY_EVENT_ID_MIN + 118)},
{ "EVT_OH_LIGHTS_L_ENGINE_START				", (THIRD_PARTY_EVENT_ID_MIN + 119)},
{ "EVT_OH_LIGHTS_IGN_SEL						", (THIRD_PARTY_EVENT_ID_MIN + 120)},
{ "EVT_OH_LIGHTS_R_ENGINE_START				", (THIRD_PARTY_EVENT_ID_MIN + 121)},
{ "EVT_OH_LIGHTS_LOGO							", (THIRD_PARTY_EVENT_ID_MIN + 122)},
{ "EVT_OH_LIGHTS_POS_STROBE					", (THIRD_PARTY_EVENT_ID_MIN + 123)},
{ "EVT_OH_LIGHTS_ANT_COL						", (THIRD_PARTY_EVENT_ID_MIN + 124)},
{ "EVT_OH_LIGHTS_WING							", (THIRD_PARTY_EVENT_ID_MIN + 125)},
{ "EVT_OH_LIGHTS_WHEEL_WELL					", (THIRD_PARTY_EVENT_ID_MIN + 126)},
{ "EVT_OH_LIGHTS_COMPASS						", (THIRD_PARTY_EVENT_ID_MIN + 982)},

// Overhead - Center Part
{ "EVT_OH_CB_LIGHT_CONTROL						", (THIRD_PARTY_EVENT_ID_MIN + 94)},		// CIRCUIT BREAKER Light Control
{ "EVT_OH_PANEL_LIGHT_CONTROL					", (THIRD_PARTY_EVENT_ID_MIN + 95)},		// PANEL Light Control Decrease
{ "EVT_OH_EC_SUPPLY_SWITCH						", (THIRD_PARTY_EVENT_ID_MIN + 96)},		// EQUIPMENT COOLING SUPPLY Switch
{ "EVT_OH_EC_EXHAUST_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 97)},		// EQUIPMENT COOLING EXHAUST Switch
{ "EVT_OH_EMER_EXIT_LIGHT_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 100)},	// EMERGENCY EXIT LIGHTS Switch 
{ "EVT_OH_EMER_EXIT_LIGHT_GUARD				", (THIRD_PARTY_EVENT_ID_MIN + 101)},	// EMERGENCY EXIT LIGHTS Guard
{ "EVT_OH_NO_SMOKING_LIGHT_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 103)},	// NO SMOKING Switch
{ "EVT_OH_FASTEN_BELTS_LIGHT_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 104)},	// FASTEN BELTS Switch

// Overhead - Miscellaneous
{ "EVT_OH_ATTND_CALL_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 105)},	// ATTENDANT CALL Switch 
{ "EVT_OH_GRND_CALL_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 106)},	// GROUND CALL Switch 
{ "EVT_OH_WIPER_LEFT_CONTROL				", (THIRD_PARTY_EVENT_ID_MIN + 36)},		// LEFT WIPER Control 
{ "EVT_OH_WIPER_RIGHT_CONTROL				", (THIRD_PARTY_EVENT_ID_MIN + 109)},	// RIGHT WIPER Control

{ "EVT_OH_EFIS_HDG_REF_TOGGLE				", (THIRD_PARTY_EVENT_ID_MIN + 6920)},	// 692A - Heading Reference Switch Toggle - note: this is only for acft. with polar nav. option, e.g. BBJ


// Overhead - NAVDSP
{ "EVT_OH_NAVDSP_DISPLAYS_SOURCE_SEL		", (THIRD_PARTY_EVENT_ID_MIN + 58)},	// DISPLAYS SOURCE Selector 
{ "EVT_OH_NAVDSP_CONTROL_PANEL_SEL			", (THIRD_PARTY_EVENT_ID_MIN + 59)},	// CONTROL PANEL Select Switch 
{ "EVT_OH_NAVDSP_FMC_SEL					", (THIRD_PARTY_EVENT_ID_MIN + 60)},	// FMC Source Select Switch
{ "EVT_OH_NAVDSP_IRS_SEL					", (THIRD_PARTY_EVENT_ID_MIN + 61)},	// IRS Transfer Switch 
{ "EVT_OH_NAVDSP_VHF_NAV_SEL				", (THIRD_PARTY_EVENT_ID_MIN + 62)},	// VHF NAV Transfer Switch 


// Overhead - FLTCTRL
{ "EVT_OH_YAW_DAMPER				", (THIRD_PARTY_EVENT_ID_MIN + 63)},	// YAW DAMPER Switch 
{ "EVT_OH_ALT_FLAPS_MASTER_SWITCH	", (THIRD_PARTY_EVENT_ID_MIN + 73)},	// ALTERNATE FLAPS Master Switch 
{ "EVT_OH_ALT_FLAPS_MASTER_GUARD	", (THIRD_PARTY_EVENT_ID_MIN + 74)},	// ALTERNATE FLAPS Master Guard 
{ "EVT_OH_SPOILER_A_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 65)},	// SPOILER A Switch 		
{ "EVT_OH_SPOILER_A_GUARD			", (THIRD_PARTY_EVENT_ID_MIN + 66)},	// SPOILER A Guard 
{ "EVT_OH_SPOILER_B_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 67)},	// SPOILER B Switch 
{ "EVT_OH_SPOILER_B_GUARD			", (THIRD_PARTY_EVENT_ID_MIN + 68)},	// SPOILER B Guard 
{ "EVT_OH_ALT_FLAPS_POS_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 75)},	// ALTERNATE FLAPS Position Switch
{ "EVT_OH_FCTL_A_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 78)},	// FLIGHT CONTROL A Switch Decrease	
{ "EVT_OH_FCTL_A_GUARD				", (THIRD_PARTY_EVENT_ID_MIN + 79)},	// FLIGHT CONTROL A Guard 
{ "EVT_OH_FCTL_B_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 80)},	// FLIGHT CONTROL B Switch Decrease
{ "EVT_OH_FCTL_B_GUARD				", (THIRD_PARTY_EVENT_ID_MIN + 81)},	// FLIGHT CONTROL B Guard 


// Overhead - CVR
{ "EVT_OH_CVR_TEST					", (THIRD_PARTY_EVENT_ID_MIN + 178)},
{ "EVT_OH_CVR_ERASE				", (THIRD_PARTY_EVENT_ID_MIN + 180)},

// Overhead - HYD
{ "EVT_OH_HYD_ENG1					", (THIRD_PARTY_EVENT_ID_MIN + 165)},
{ "EVT_OH_HYD_ELEC2				", (THIRD_PARTY_EVENT_ID_MIN + 167)},
{ "EVT_OH_HYD_ELEC1				", (THIRD_PARTY_EVENT_ID_MIN + 168)},
{ "EVT_OH_HYD_ENG2					", (THIRD_PARTY_EVENT_ID_MIN + 166)},

// Overhead - ICE
{ "EVT_OH_ICE_WINDOW_HEAT_1		", (THIRD_PARTY_EVENT_ID_MIN + 135)},
{ "EVT_OH_ICE_WINDOW_HEAT_2		", (THIRD_PARTY_EVENT_ID_MIN + 136)},
{ "EVT_OH_ICE_WINDOW_HEAT_3		", (THIRD_PARTY_EVENT_ID_MIN + 138)},
{ "EVT_OH_ICE_WINDOW_HEAT_4		", (THIRD_PARTY_EVENT_ID_MIN + 139)},
{ "EVT_OH_ICE_WINDOW_HEAT_TEST		", (THIRD_PARTY_EVENT_ID_MIN + 137)},
{ "EVT_OH_ICE_PROBE_HEAT_1			", (THIRD_PARTY_EVENT_ID_MIN + 140)},
{ "EVT_OH_ICE_PROBE_HEAT_2			", (THIRD_PARTY_EVENT_ID_MIN + 141)},
{ "EVT_OH_ICE_TAT_TEST				", (THIRD_PARTY_EVENT_ID_MIN + 142)}, // was used for "CAPT PITOT"annunciator light
{ "EVT_OH_ICE_WING_ANTIICE			", (THIRD_PARTY_EVENT_ID_MIN + 156)},
{ "EVT_OH_ICE_ENGINE_ANTIICE_1		", (THIRD_PARTY_EVENT_ID_MIN + 157)},
{ "EVT_OH_ICE_ENGINE_ANTIICE_2		", (THIRD_PARTY_EVENT_ID_MIN + 158)},

// Overhead - PNEU

// -600/700 panel only
{ "EVT_OH_AIRCOND_TEMP_SOURCE_SELECTOR		", (THIRD_PARTY_EVENT_ID_MIN + 187)},
{ "EVT_OH_AIRCOND_TEMP_SELECTOR_CONT		", (THIRD_PARTY_EVENT_ID_MIN + 191)},
{ "EVT_OH_AIRCOND_TEMP_SELECTOR_CABIN		", (THIRD_PARTY_EVENT_ID_MIN + 192)},
{ "EVT_OH_AIRCOND_TYPE_600_LAST			", EVT_OH_AIRCOND_TEMP_SELECTOR_CABIN },

// -800/900 panel only
{ "EVT_OH_AIRCOND_TEMP_SOURCE_SELECTOR_800	", (THIRD_PARTY_EVENT_ID_MIN + 313)},
{ "EVT_OH_AIRCOND_TEMP_SELECTOR_CONT_800	", (THIRD_PARTY_EVENT_ID_MIN + 305)},
{ "EVT_OH_AIRCOND_TEMP_SELECTOR_FWD_800	", (THIRD_PARTY_EVENT_ID_MIN + 306)},
{ "EVT_OH_AIRCOND_TEMP_SELECTOR_AFT_800	", (THIRD_PARTY_EVENT_ID_MIN + 307)},
{ "EVT_OH_AIRCOND_TRIM_AIR_SWITCH_800		", (THIRD_PARTY_EVENT_ID_MIN + 311)},

{ "EVT_OH_BLEED_RECIRC_FAN_L_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 872)},
{ "EVT_OH_BLEED_RECIRC_FAN_R_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 196)},
{ "EVT_OH_BLEED_OVHT_TEST_BUTTON			", (THIRD_PARTY_EVENT_ID_MIN + 199)},
{ "EVT_OH_BLEED_PACK_L_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 200)},
{ "EVT_OH_BLEED_PACK_R_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 201)},
{ "EVT_OH_BLEED_ISOLATION_VALVE_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 202)},
{ "EVT_OH_BLEED_TRIP_RESET_BUTTON			", (THIRD_PARTY_EVENT_ID_MIN + 209)},
{ "EVT_OH_BLEED_ENG_1_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 210)},
{ "EVT_OH_BLEED_APU_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 211)},
{ "EVT_OH_BLEED_ENG_2_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 212)},

// Overhead - Cabin Press
{ "EVT_OH_PRESS_FLT_ALT_KNOB				", (THIRD_PARTY_EVENT_ID_MIN + 218)},
{ "EVT_OH_PRESS_LAND_ALT_KNOB				", (THIRD_PARTY_EVENT_ID_MIN + 220)},
{ "EVT_OH_PRESS_VALVE_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 222)},
{ "EVT_OH_PRESS_SELECTOR					", (THIRD_PARTY_EVENT_ID_MIN + 223)},

// Overhead - Cabin Alt
{ "EVT_OH_CAB_ALT_HORN_CUTOUT_BUTTON		", (THIRD_PARTY_EVENT_ID_MIN + 183)},

// Aft Overhead - LE Devices
{ "EVT_OH_LE_DEVICES_TEST_SWITCH	", (THIRD_PARTY_EVENT_ID_MIN + 224)},

// Aft Overhead - Service Interphone Switch
{ "EVT_OH_SERVICE_INTERPHONE_SWITCH ", (THIRD_PARTY_EVENT_ID_MIN + 257)},

// Aft Overhead - Dome Switch
{ "EVT_OH_DOME_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 258)},

// Aft Overhead - ISDU panel
{ "EVT_ISDU_DSPL_SEL						", (THIRD_PARTY_EVENT_ID_MIN + 229)},	// ISDU DiSPLay SELector
{ "EVT_ISDU_FIRST							", EVT_ISDU_DSPL_SEL },
{ "EVT_ISDU_DSPL_SEL_BRT					", (THIRD_PARTY_EVENT_ID_MIN + 230)},	// ISDU DiSPLay SELector BRT (Brightness)},
{ "EVT_ISDU_SYS_DSPL						", (THIRD_PARTY_EVENT_ID_MIN + 231)},	// ISDU SYS DSPL  
{ "EVT_ISDU_KBD_1							", (THIRD_PARTY_EVENT_ID_MIN + 232)},	// ISDU KEYBOARD 1
{ "EVT_ISDU_KBD_2							", (THIRD_PARTY_EVENT_ID_MIN + 233)},	// ISDU KEYBOARD 2 or N
{ "EVT_ISDU_KBD_3							", (THIRD_PARTY_EVENT_ID_MIN + 234)},	// ISDU KEYBOARD 3
{ "EVT_ISDU_KBD_4							", (THIRD_PARTY_EVENT_ID_MIN + 235)},	// ISDU KEYBOARD 4 or W
{ "EVT_ISDU_KBD_5							", (THIRD_PARTY_EVENT_ID_MIN + 236)},	// ISDU KEYBOARD 5 or H
{ "EVT_ISDU_KBD_6							", (THIRD_PARTY_EVENT_ID_MIN + 237)},	// ISDU KEYBOARD 6 or E
{ "EVT_ISDU_KBD_7							", (THIRD_PARTY_EVENT_ID_MIN + 238)},	// ISDU KEYBOARD 7
{ "EVT_ISDU_KBD_8							", (THIRD_PARTY_EVENT_ID_MIN + 239)},	// ISDU KEYBOARD 8 or S
{ "EVT_ISDU_KBD_9							", (THIRD_PARTY_EVENT_ID_MIN + 240)},	// ISDU KEYBOARD 9
{ "EVT_ISDU_KBD_ENT						", (THIRD_PARTY_EVENT_ID_MIN + 241)},	// ISDU KEYBOARD ENTer
{ "EVT_ISDU_KBD_0							", (THIRD_PARTY_EVENT_ID_MIN + 243)},	// ISDU KEYBOARD 0
{ "EVT_ISDU_KBD_CLR						", (THIRD_PARTY_EVENT_ID_MIN + 244)},	// ISDU KEYBOARD CLR
{ "EVT_IRU_MSU_LEFT						", (THIRD_PARTY_EVENT_ID_MIN + 255)},	// LEFT IRS Mode Selector Unit 
{ "EVT_IRU_MSU_RIGHT						", (THIRD_PARTY_EVENT_ID_MIN + 256)},	// RIGHT IRS Mode Selector Unit
{ "EVT_ISDU_LAST							", EVT_IRU_MSU_RIGHT },

{ "EVT_WLAN_SWITCH							", (THIRD_PARTY_EVENT_ID_MIN + 888)},
{ "EVT_WLAN_GUARD							", (THIRD_PARTY_EVENT_ID_MIN + 889)},

// Aft Overhead - Engine control
{ "EVT_OH_EEC_L_GUARD						", (THIRD_PARTY_EVENT_ID_MIN + 267)},
{ "EVT_OH_EEC_L_SWITCH						", (THIRD_PARTY_EVENT_ID_MIN + 268)},
{ "EVT_OH_EEC_R_GUARD						", (THIRD_PARTY_EVENT_ID_MIN + 270)},
{ "EVT_OH_EEC_R_SWITCH						", (THIRD_PARTY_EVENT_ID_MIN + 271)},

// Aft Overhead - Oxygen
{ "EVT_OH_OXY_PASS_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 264)},
{ "EVT_OH_OXY_PASS_GUARD					", (THIRD_PARTY_EVENT_ID_MIN + 265)},
{ "EVT_OH_OXY_TEST_RESET_SWITCH_L			", (THIRD_PARTY_EVENT_ID_MIN + 983)},
{ "EVT_OH_OXY_TEST_RESET_SWITCH_R			", (THIRD_PARTY_EVENT_ID_MIN + 9832)},
{ "EVT_OH_OXY_RED_BUTTON_L					", (THIRD_PARTY_EVENT_ID_MIN + 9831)},
{ "EVT_OH_OXY_RED_BUTTON_R					", (THIRD_PARTY_EVENT_ID_MIN + 9833)},

// Aft Overhead - Flt Rec & Warning
{ "EVT_OH_FLTREC_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 298)},
{ "EVT_OH_FLTREC_GUARD						", (THIRD_PARTY_EVENT_ID_MIN + 299)},
{ "EVT_OH_WARNING_TEST_MACH_IAS_1_PUSH		", (THIRD_PARTY_EVENT_ID_MIN + 301)},
{ "EVT_OH_WARNING_TEST_MACH_IAS_2_PUSH		", (THIRD_PARTY_EVENT_ID_MIN + 302)},
{ "EVT_OH_WARNING_TEST_STALL_1_PUSH		", (THIRD_PARTY_EVENT_ID_MIN + 303)},
{ "EVT_OH_WARNING_TEST_STALL_2_PUSH		", (THIRD_PARTY_EVENT_ID_MIN + 304)},

// Overhead - test gauge
{ "EVT_OH_TRIM_AIR_SWITCH_TOGGLE			", (THIRD_PARTY_EVENT_ID_MIN + 15200)},	// user clicks a switch
{ "EVT_OH_WING_BODY_OVERHEAT_TEST_PUSH		", (THIRD_PARTY_EVENT_ID_MIN + 15201)},	// user pushes a pushbutton 


// Integrated Standby Flight Display - ISFD
{ "EVT_ISFD_APP							", (THIRD_PARTY_EVENT_ID_MIN + 987)},	// 	
{ "EVT_ISFD_HP_IN							", (THIRD_PARTY_EVENT_ID_MIN + 986)},	//	
{ "EVT_ISFD_PLUS							", (THIRD_PARTY_EVENT_ID_MIN + 988)},	//	
{ "EVT_ISFD_MINUS							", (THIRD_PARTY_EVENT_ID_MIN + 989)},	//	
{ "EVT_ISFD_ATT_RST						", (THIRD_PARTY_EVENT_ID_MIN + 990)},	//	
{ "EVT_ISFD_BARO							", (THIRD_PARTY_EVENT_ID_MIN + 991)},	//	
{ "EVT_ISFD_BARO_PUSH						", (THIRD_PARTY_EVENT_ID_MIN + 993)},	//	

// Analog standby instruments
{ "EVT_STANDBY_ADI_APPR_MODE				", (THIRD_PARTY_EVENT_ID_MIN + 474)},	// 	
{ "EVT_STANDBY_ADI_CAGE_KNOB				", (THIRD_PARTY_EVENT_ID_MIN + 476)},	// 	
{ "EVT_STANDBY_ALT_BARO_KNOB				", (THIRD_PARTY_EVENT_ID_MIN + 492)},	// 	
{ "EVT_RMI_LEFT_SELECTOR					", (THIRD_PARTY_EVENT_ID_MIN + 497)},	// 	
{ "EVT_RMI_RIGHT_SELECTOR					", (THIRD_PARTY_EVENT_ID_MIN + 498)},	// 	


// MCP
//
{ "EVT_MCP_COURSE_SELECTOR_L				", (THIRD_PARTY_EVENT_ID_MIN + 376)},
{ "EVT_MCP_FD_SWITCH_L						", (THIRD_PARTY_EVENT_ID_MIN + 378)},
{ "EVT_MCP_AT_ARM_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 380)},
{ "EVT_MCP_N1_SWITCH						", (THIRD_PARTY_EVENT_ID_MIN + 381)},
{ "EVT_MCP_SPEED_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 382)},
{ "EVT_MCP_CO_SWITCH						", (THIRD_PARTY_EVENT_ID_MIN + 383)},
{ "EVT_MCP_SPEED_SELECTOR					", (THIRD_PARTY_EVENT_ID_MIN + 384)},
{ "EVT_MCP_VNAV_SWITCH						", (THIRD_PARTY_EVENT_ID_MIN + 386)},
{ "EVT_MCP_SPD_INTV_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 387)},
{ "EVT_MCP_BANK_ANGLE_SELECTOR				", (THIRD_PARTY_EVENT_ID_MIN + 389)},
{ "EVT_MCP_HEADING_SELECTOR				", (THIRD_PARTY_EVENT_ID_MIN + 390)},
{ "EVT_MCP_LVL_CHG_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 391)},
{ "EVT_MCP_HDG_SEL_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 392)},
{ "EVT_MCP_APP_SWITCH						", (THIRD_PARTY_EVENT_ID_MIN + 393)},
{ "EVT_MCP_ALT_HOLD_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 394)},
{ "EVT_MCP_VS_SWITCH						", (THIRD_PARTY_EVENT_ID_MIN + 395)},
{ "EVT_MCP_VOR_LOC_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 396)},
{ "EVT_MCP_LNAV_SWITCH						", (THIRD_PARTY_EVENT_ID_MIN + 397)},
{ "EVT_MCP_ALTITUDE_SELECTOR				", (THIRD_PARTY_EVENT_ID_MIN + 400)},
{ "EVT_MCP_VS_SELECTOR						", (THIRD_PARTY_EVENT_ID_MIN + 401)},
{ "EVT_MCP_CMD_A_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 402)},
{ "EVT_MCP_CMD_B_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 403)},
{ "EVT_MCP_CWS_A_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 404)},
{ "EVT_MCP_CWS_B_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 405)},
{ "EVT_MCP_DISENGAGE_BAR					", (THIRD_PARTY_EVENT_ID_MIN + 406)},
{ "EVT_MCP_FD_SWITCH_R						", (THIRD_PARTY_EVENT_ID_MIN + 407)},
{ "EVT_MCP_COURSE_SELECTOR_R				", (THIRD_PARTY_EVENT_ID_MIN + 409)},
{ "EVT_MCP_ALT_INTV_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 885)},

// EFIS Captain control panel
//
// NOTE: Order in captain and F/O sides must be same, and events in both sides must increase by 1
//
{ "EVT_EFIS_CPT_MINIMUMS					", (THIRD_PARTY_EVENT_ID_MIN + 355)},
{ "EVT_EFIS_CPT_FIRST						", EVT_EFIS_CPT_MINIMUMS },
{ "EVT_EFIS_CPT_MINIMUMS_RADIO_BARO		", (THIRD_PARTY_EVENT_ID_MIN + 356)},
{ "EVT_EFIS_CPT_MINIMUMS_RST				", (THIRD_PARTY_EVENT_ID_MIN + 357)},
{ "EVT_EFIS_CPT_VOR_ADF_SELECTOR_L			", (THIRD_PARTY_EVENT_ID_MIN + 358)},
{ "EVT_EFIS_CPT_MODE						", (THIRD_PARTY_EVENT_ID_MIN + 359)},
{ "EVT_EFIS_CPT_MODE_CTR					", (THIRD_PARTY_EVENT_ID_MIN + 360)},
{ "EVT_EFIS_CPT_RANGE						", (THIRD_PARTY_EVENT_ID_MIN + 361)},
{ "EVT_EFIS_CPT_RANGE_TFC					", (THIRD_PARTY_EVENT_ID_MIN + 362)},
{ "EVT_EFIS_CPT_FPV						", (THIRD_PARTY_EVENT_ID_MIN + 363)},
{ "EVT_EFIS_CPT_MTRS						", (THIRD_PARTY_EVENT_ID_MIN + 364)},
{ "EVT_EFIS_CPT_BARO						", (THIRD_PARTY_EVENT_ID_MIN + 365)},
{ "EVT_EFIS_CPT_BARO_IN_HPA				", (THIRD_PARTY_EVENT_ID_MIN + 366)},
{ "EVT_EFIS_CPT_BARO_STD					", (THIRD_PARTY_EVENT_ID_MIN + 367)},
{ "EVT_EFIS_CPT_VOR_ADF_SELECTOR_R			", (THIRD_PARTY_EVENT_ID_MIN + 368)},
{ "EVT_EFIS_CPT_WXR						", (THIRD_PARTY_EVENT_ID_MIN + 369)},
{ "EVT_EFIS_CPT_STA						", (THIRD_PARTY_EVENT_ID_MIN + 370)},
{ "EVT_EFIS_CPT_WPT						", (THIRD_PARTY_EVENT_ID_MIN + 371)},
{ "EVT_EFIS_CPT_ARPT						", (THIRD_PARTY_EVENT_ID_MIN + 372)},
{ "EVT_EFIS_CPT_DATA						", (THIRD_PARTY_EVENT_ID_MIN + 373)},
{ "EVT_EFIS_CPT_POS						", (THIRD_PARTY_EVENT_ID_MIN + 374)},
{ "EVT_EFIS_CPT_TERR						", (THIRD_PARTY_EVENT_ID_MIN + 375)},
{ "EVT_EFIS_CPT_LAST						", EVT_EFIS_CPT_TERR },

// EFIS F/O control panels
//
{ "EVT_EFIS_FO_MINIMUMS					", (THIRD_PARTY_EVENT_ID_MIN + 411)},
{ "EVT_EFIS_FO_FIRST						", EVT_EFIS_FO_MINIMUMS },
{ "EVT_EFIS_FO_MINIMUMS_RADIO_BARO			", (THIRD_PARTY_EVENT_ID_MIN + 412)},
{ "EVT_EFIS_FO_MINIMUMS_RST				", (THIRD_PARTY_EVENT_ID_MIN + 413)},
{ "EVT_EFIS_FO_VOR_ADF_SELECTOR_L			", (THIRD_PARTY_EVENT_ID_MIN + 414)},
{ "EVT_EFIS_FO_MODE						", (THIRD_PARTY_EVENT_ID_MIN + 415)},
{ "EVT_EFIS_FO_MODE_CTR					", (THIRD_PARTY_EVENT_ID_MIN + 416)},
{ "EVT_EFIS_FO_RANGE						", (THIRD_PARTY_EVENT_ID_MIN + 417)},
{ "EVT_EFIS_FO_RANGE_TFC					", (THIRD_PARTY_EVENT_ID_MIN + 418)},
{ "EVT_EFIS_FO_FPV							", (THIRD_PARTY_EVENT_ID_MIN + 419)},
{ "EVT_EFIS_FO_MTRS						", (THIRD_PARTY_EVENT_ID_MIN + 420)},
{ "EVT_EFIS_FO_BARO						", (THIRD_PARTY_EVENT_ID_MIN + 421)},
{ "EVT_EFIS_FO_BARO_IN_HPA					", (THIRD_PARTY_EVENT_ID_MIN + 422)},
{ "EVT_EFIS_FO_BARO_STD					", (THIRD_PARTY_EVENT_ID_MIN + 423)},
{ "EVT_EFIS_FO_VOR_ADF_SELECTOR_R			", (THIRD_PARTY_EVENT_ID_MIN + 424)},
{ "EVT_EFIS_FO_WXR							", (THIRD_PARTY_EVENT_ID_MIN + 425)},
{ "EVT_EFIS_FO_STA							", (THIRD_PARTY_EVENT_ID_MIN + 426)},
{ "EVT_EFIS_FO_WPT							", (THIRD_PARTY_EVENT_ID_MIN + 427)},
{ "EVT_EFIS_FO_ARPT						", (THIRD_PARTY_EVENT_ID_MIN + 428)},
{ "EVT_EFIS_FO_DATA						", (THIRD_PARTY_EVENT_ID_MIN + 429)},
{ "EVT_EFIS_FO_POS							", (THIRD_PARTY_EVENT_ID_MIN + 430)},
{ "EVT_EFIS_FO_TERR						", (THIRD_PARTY_EVENT_ID_MIN + 431)},
{ "EVT_EFIS_FO_LAST						", EVT_EFIS_FO_TERR },


// Display select panels
// 
{ "EVT_DSP_CPT_BELOW_GS_INHIBIT_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 327)},	// CAPT Side BELOW GS INHIBIT Pushbutton
{ "EVT_DSP_CPT_MAIN_DU_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 335)},	// CAPT side MAIN PANEL DISPLAY UNITS (MAIN PANEL DUs)}, Selector 
{ "EVT_DSP_CPT_LOWER_DU_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 336)},	// CAPT side LOWER DISPLAY UNIT (LOWER DU)}, Selector 
{ "EVT_DSP_CPT_DISENGAGE_TEST_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 342)},	// CAPT side DISENGAGE LIGHTS TEST switch
{ "EVT_DSP_CPT_AP_RESET_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 339)},	// CAPT Side AP RESET Pushbutton
{ "EVT_DSP_CPT_AT_RESET_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 340)},	// CAPT Side AT RESET Pushbutton
{ "EVT_DSP_CPT_FMC_RESET_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 341)},	// CAPT Side FMC RESET Pushbutton
{ "EVT_DSP_CPT_MASTER_LIGHTS_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 346)},	// MASTER LIGHTS & TEST switch
{ "EVT_DSP_CPT_LAST						", EVT_DSP_CPT_MASTER_LIGHTS_SWITCH },// Keep this the last of CAPT side DSP panel items and before the F/O DSP panel items start

{ "EVT_DSP_FO_MAIN_DU_SELECTOR				", (THIRD_PARTY_EVENT_ID_MIN + 440)},	// FO side MAIN PANEL DISPLAY UNITS (MAIN PANEL DUs)}, Selector 
{ "EVT_DSP_FO_LOWER_DU_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 441)},	// FO side LOWER DISPLAY UNIT (LOWER DU)}, Selector 
{ "EVT_DSP_FO_DISENGAGE_TEST_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 442)},	// FO side DISENGAGE LIGHTS TEST switch
{ "EVT_DSP_FO_FMC_RESET_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 443)},	// FO Side FMC RESET Pushbutton
{ "EVT_DSP_FO_AT_RESET_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 444)},	// FO Side AT RESET Pushbutton
{ "EVT_DSP_FO_AP_RESET_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 445)},	// FO Side AP RESET Pushbutton
{ "EVT_DSP_FO_BELOW_GS_INHIBIT_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 446)},	// FO Side BELOW GS INHIBIT Pushbutton


// Main panel misc
{ "EVT_MPM_AUTOBRAKE_SELECTOR				", (THIRD_PARTY_EVENT_ID_MIN + 460)},
{ "EVT_MPM_MFD_SYS_BUTTON					", (THIRD_PARTY_EVENT_ID_MIN + 462)},
{ "EVT_MPM_MFD_ENG_BUTTON					", (THIRD_PARTY_EVENT_ID_MIN + 463)},
{ "EVT_MPM_MFD_C_R_BUTTON					", (THIRD_PARTY_EVENT_ID_MIN + 4621)},
{ "EVT_MPM_SPEED_REFERENCE_SELECTOR		", (THIRD_PARTY_EVENT_ID_MIN + 464)},
{ "EVT_MPM_SPEED_REFERENCE_CONTROL			", (THIRD_PARTY_EVENT_ID_MIN + 465)},
{ "EVT_MPM_N1SET_SELECTOR					", (THIRD_PARTY_EVENT_ID_MIN + 466)},
{ "EVT_MPM_N1SET_CONTROL					", (THIRD_PARTY_EVENT_ID_MIN + 467)},
{ "EVT_MPM_FUEL_FLOW_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 468)},

// Gear panel
{ "EVT_GEAR_LEVER							", (THIRD_PARTY_EVENT_ID_MIN + 455)},
{ "EVT_GEAR_LEVER_OFF						", (THIRD_PARTY_EVENT_ID_MIN + 4551)},
{ "EVT_GEAR_LEVER_UNLOCK					", (THIRD_PARTY_EVENT_ID_MIN + 4552)},

// Nose Wheel Steering
{ "EVT_NOSE_WHEEL_STEERING_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 325)},
{ "EVT_NOSE_WHEEL_STEERING_SWITCH_GUARD	", (THIRD_PARTY_EVENT_ID_MIN + 326)},
{ "EVT_TILLER								", (THIRD_PARTY_EVENT_ID_MIN + 975)},

// Warning/caution
{ "EVT_FIRE_WARN_LIGHT_LEFT				", (THIRD_PARTY_EVENT_ID_MIN + 347)},	// 347 - Master Fire Warning (FIRE WARN)}, Light Left Switch Toggle
{ "EVT_MASTER_CAUTION_LIGHT_LEFT			", (THIRD_PARTY_EVENT_ID_MIN + 348)},	// 348 - MASTER CAUTION Light Left Switch Toggle

{ "EVT_FIRE_WARN_LIGHT_RIGHT				", (THIRD_PARTY_EVENT_ID_MIN + 439)},	// 
{ "EVT_MASTER_CAUTION_LIGHT_RIGHT			", (THIRD_PARTY_EVENT_ID_MIN + 438)},	// 

{ "EVT_SYSTEM_ANNUNCIATOR_PANEL_LEFT		", (THIRD_PARTY_EVENT_ID_MIN + 349)},	// 
{ "EVT_SYSTEM_ANNUNCIATOR_PANEL_RIGHT		", (THIRD_PARTY_EVENT_ID_MIN + 437)},	// 

// Lower Main
{ "EVT_LWRMAIN_CAPT_MAIN_PANEL_BRT			", (THIRD_PARTY_EVENT_ID_MIN + 328)},
{ "EVT_LWRMAIN_CAPT_OUTBD_DU_BRT			", (THIRD_PARTY_EVENT_ID_MIN + 329)},
{ "EVT_LWRMAIN_CAPT_INBD_DU_BRT			", (THIRD_PARTY_EVENT_ID_MIN + 330)},
{ "EVT_LWRMAIN_CAPT_INBD_DU_INNER_BRT		", (THIRD_PARTY_EVENT_ID_MIN + 331)},
{ "EVT_LWRMAIN_CAPT_LOWER_DU_BRT			", (THIRD_PARTY_EVENT_ID_MIN + 332)},
{ "EVT_LWRMAIN_CAPT_LOWER_DU_INNER_BRT		", (THIRD_PARTY_EVENT_ID_MIN + 333)},
{ "EVT_LWRMAIN_CAPT_UPPER_DU_BRT			", (THIRD_PARTY_EVENT_ID_MIN + 334)},
{ "EVT_LWRMAIN_CAPT_BACKGROUND_BRT			", (THIRD_PARTY_EVENT_ID_MIN + 337)},
{ "EVT_LWRMAIN_CAPT_AFDS_BRT				", (THIRD_PARTY_EVENT_ID_MIN + 338)},

{ "EVT_LWRMAIN_FO_INBD_DU_BRT				", (THIRD_PARTY_EVENT_ID_MIN + 507)},
{ "EVT_LWRMAIN_FO_INBD_DU_INNER_BRT		", (THIRD_PARTY_EVENT_ID_MIN + 508)},
{ "EVT_LWRMAIN_FO_MAIN_PANEL_BRT			", (THIRD_PARTY_EVENT_ID_MIN + 510)},
{ "EVT_LWRMAIN_FO_OUTBD_DU_BRT				", (THIRD_PARTY_EVENT_ID_MIN + 509)},


// GPWS
{ "EVT_GPWS_SYS_TEST_BTN					", (THIRD_PARTY_EVENT_ID_MIN + 500)},
{ "EVT_GPWS_FLAP_INHIBIT_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 501)},
{ "EVT_GPWS_FLAP_INHIBIT_GUARD				", (THIRD_PARTY_EVENT_ID_MIN + 502)},
{ "EVT_GPWS_GEAR_INHIBIT_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 503)},
{ "EVT_GPWS_GEAR_INHIBIT_GUARD				", (THIRD_PARTY_EVENT_ID_MIN + 504)},
{ "EVT_GPWS_TERR_INHIBIT_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 505)},
{ "EVT_GPWS_TERR_INHIBIT_GUARD				", (THIRD_PARTY_EVENT_ID_MIN + 506)},

// Chronometers
{ "EVT_CHRONO_L_CHR						", (THIRD_PARTY_EVENT_ID_MIN + 314)},
{ "EVT_CHRONO_L_TIME_DATE					", (THIRD_PARTY_EVENT_ID_MIN + 315)},
{ "EVT_CHRONO_L_SET						", (THIRD_PARTY_EVENT_ID_MIN + 316)},
{ "EVT_CHRONO_L_PLUS						", (THIRD_PARTY_EVENT_ID_MIN + 317)},
{ "EVT_CHRONO_L_MINUS						", (THIRD_PARTY_EVENT_ID_MIN + 318)},
{ "EVT_CHRONO_L_RESET						", (THIRD_PARTY_EVENT_ID_MIN + 320)},
{ "EVT_CHRONO_L_ET							", (THIRD_PARTY_EVENT_ID_MIN + 321)},
{ "EVT_CHRONO_R_CHR						", (THIRD_PARTY_EVENT_ID_MIN + 523)},
{ "EVT_CHRONO_R_TIME_DATE					", (THIRD_PARTY_EVENT_ID_MIN + 524)},
{ "EVT_CHRONO_R_SET						", (THIRD_PARTY_EVENT_ID_MIN + 525)},
{ "EVT_CHRONO_R_PLUS						", (THIRD_PARTY_EVENT_ID_MIN + 526)},
{ "EVT_CHRONO_R_MINUS						", (THIRD_PARTY_EVENT_ID_MIN + 527)},
{ "EVT_CHRONO_R_RESET						", (THIRD_PARTY_EVENT_ID_MIN + 529)},
{ "EVT_CHRONO_R_ET							", (THIRD_PARTY_EVENT_ID_MIN + 530)},
{ "EVT_CLOCK_L								", (THIRD_PARTY_EVENT_ID_MIN + 890)},
{ "EVT_CLOCK_R								", (THIRD_PARTY_EVENT_ID_MIN + 893)},

// Control Stand
//
{ "EVT_CONTROL_STAND_TRIM_WHEEL					", (THIRD_PARTY_EVENT_ID_MIN + 678)},
{ "EVT_CONTROL_STAND_SPEED_BRAKE_LEVER				", (THIRD_PARTY_EVENT_ID_MIN + 679)},
{ "EVT_CONTROL_STAND_SPEED_BRAKE_LEVER_DOWN		", (THIRD_PARTY_EVENT_ID_MIN + 6791)},
{ "EVT_CONTROL_STAND_SPEED_BRAKE_LEVER_ARM			", (THIRD_PARTY_EVENT_ID_MIN + 6792)},
{ "EVT_CONTROL_STAND_SPEED_BRAKE_LEVER_50PCT		", (THIRD_PARTY_EVENT_ID_MIN + 6793)},
{ "EVT_CONTROL_STAND_SPEED_BRAKE_LEVER_FLT_DET		", (THIRD_PARTY_EVENT_ID_MIN + 6794)},
{ "EVT_CONTROL_STAND_SPEED_BRAKE_LEVER_UP			", (THIRD_PARTY_EVENT_ID_MIN + 6795)},
{ "EVT_CONTROL_STAND_REV_THRUST1_LEVER				", (THIRD_PARTY_EVENT_ID_MIN + 680)},
{ "EVT_CONTROL_STAND_REV_THRUST2_LEVER				", (THIRD_PARTY_EVENT_ID_MIN + 681)},
{ "EVT_CONTROL_STAND_FWD_THRUST1_LEVER				", (THIRD_PARTY_EVENT_ID_MIN + 683)},
{ "EVT_CONTROL_STAND_FWD_THRUST2_LEVER				", (THIRD_PARTY_EVENT_ID_MIN + 686)},
{ "EVT_CONTROL_STAND_TOGA1_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 684)},
{ "EVT_CONTROL_STAND_TOGA2_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 687)},
{ "EVT_CONTROL_STAND_AT1_DISENGAGE_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 682)},
{ "EVT_CONTROL_STAND_AT2_DISENGAGE_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 685)},
{ "EVT_CONTROL_STAND_ENG1_START_LEVER				", (THIRD_PARTY_EVENT_ID_MIN + 688)},
{ "EVT_CONTROL_STAND_ENG2_START_LEVER				", (THIRD_PARTY_EVENT_ID_MIN + 689)},
{ "EVT_CONTROL_STAND_PARK_BRAKE_LEVER				", (THIRD_PARTY_EVENT_ID_MIN + 693)},
{ "EVT_CONTROL_STAND_STABTRIM_ELEC_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 709)},
{ "EVT_CONTROL_STAND_STABTRIM_ELEC_SWITCH_GUARD	", (THIRD_PARTY_EVENT_ID_MIN + 710)},
{ "EVT_CONTROL_STAND_STABTRIM_AP_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 711)},
{ "EVT_CONTROL_STAND_STABTRIM_AP_SWITCH_GUARD		", (THIRD_PARTY_EVENT_ID_MIN + 712)},
{ "EVT_CONTROL_STAND_HORN_CUTOUT_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 713)},
{ "EVT_CONTROL_STAND_FLAPS_LEVER					", (THIRD_PARTY_EVENT_ID_MIN + 714)},
{ "EVT_CONTROL_STAND_FLAPS_LEVER_0					", (THIRD_PARTY_EVENT_ID_MIN + 7141)},
{ "EVT_CONTROL_STAND_FLAPS_LEVER_1					", (THIRD_PARTY_EVENT_ID_MIN + 7142)},
{ "EVT_CONTROL_STAND_FLAPS_LEVER_2					", (THIRD_PARTY_EVENT_ID_MIN + 7143)},
{ "EVT_CONTROL_STAND_FLAPS_LEVER_5					", (THIRD_PARTY_EVENT_ID_MIN + 7144)},
{ "EVT_CONTROL_STAND_FLAPS_LEVER_10				", (THIRD_PARTY_EVENT_ID_MIN + 7145)},
{ "EVT_CONTROL_STAND_FLAPS_LEVER_15				", (THIRD_PARTY_EVENT_ID_MIN + 7146)},
{ "EVT_CONTROL_STAND_FLAPS_LEVER_25				", (THIRD_PARTY_EVENT_ID_MIN + 7147)},
{ "EVT_CONTROL_STAND_FLAPS_LEVER_30				", (THIRD_PARTY_EVENT_ID_MIN + 7148)},
{ "EVT_CONTROL_STAND_FLAPS_LEVER_40				", (THIRD_PARTY_EVENT_ID_MIN + 7149)},

// FLT  DK DOOR Panel
{ "EVT_FLT_DK_DOOR_KNOB			", (THIRD_PARTY_EVENT_ID_MIN + 834)},
{ "EVT_STAB_TRIM_OVRD_SWITCH_GUARD	", (THIRD_PARTY_EVENT_ID_MIN + 830)},
{ "EVT_STAB_TRIM_OVRD_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 831)},


// VHF Panels
{ "EVT_NAV1_TRANSFER_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 729)},
{ "EVT_NAV1_FIRST					", EVT_NAV1_TRANSFER_SWITCH },
{ "EVT_NAV1_TEST_SWICTH			", (THIRD_PARTY_EVENT_ID_MIN + 731)},
{ "EVT_NAV1_INNER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 732)},
{ "EVT_NAV1_OUTER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 733)},
{ "EVT_NAV1_LAST					", EVT_NAV1_OUTER_SELECTOR },

{ "EVT_NAV2_TRANSFER_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 845)},
{ "EVT_NAV2_FIRST					", EVT_NAV2_TRANSFER_SWITCH },
{ "EVT_NAV2_TEST_SWICTH			", (THIRD_PARTY_EVENT_ID_MIN + 847)},
{ "EVT_NAV2_OUTER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 848)},
{ "EVT_NAV2_INNER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 849)},
{ "EVT_NAV2_LAST					", EVT_NAV2_INNER_SELECTOR },

// ADF Panel
{ "EVT_ADF_MODE_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 818)},
{ "EVT_ADF_TONE_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 820)},
{ "EVT_ADF_INNER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 822)},
{ "EVT_ADF_MIDDLE_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 823)},
{ "EVT_ADF_OUTER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 824)},
{ "EVT_ADF_TRANSFER_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 827)},

// SELCAL Panel
{ "EVT_SELCAL_VHF1_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 812)},
{ "EVT_SELCAL_VHF2_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 813)},
{ "EVT_SELCAL_VHF3_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 814)},
{ "EVT_SELCAL_HF1_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 937)},
{ "EVT_SELCAL_HF2_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 938)},

// COMM Panels
{ "EVT_COM1_TRANSFER_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 721)},
{ "EVT_COM1_START_RANGE1			", EVT_COM1_TRANSFER_SWITCH },
{ "EVT_COM1_HF_SENSOR_KNOB			", (THIRD_PARTY_EVENT_ID_MIN + 724)},
{ "EVT_COM1_TEST_SWICTH			", (THIRD_PARTY_EVENT_ID_MIN + 725)},
{ "EVT_COM1_OUTER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 726)},
{ "EVT_COM1_INNER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 727)},
{ "EVT_COM1_END_RANGE1				", EVT_COM1_INNER_SELECTOR },
{ "EVT_COM1_PNL_OFF_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 903)},
{ "EVT_COM1_START_RANGE2			", EVT_COM1_PNL_OFF_SWITCH },
{ "EVT_COM1_VHF1_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 904)},
{ "EVT_COM1_VHF2_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 906)},
{ "EVT_COM1_VHF3_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 908)},
{ "EVT_COM1_HF1_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 910)},
{ "EVT_COM1_AM_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 912)},
{ "EVT_COM1_HF2_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 914)},
{ "EVT_COM1_END_RANGE2				", EVT_COM1_HF2_SWITCH },


{ "EVT_COM2_TRANSFER_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 837)},
{ "EVT_COM2_START_RANGE1			", EVT_COM2_TRANSFER_SWITCH },
{ "EVT_COM2_HF_SENSOR_KNOB			", (THIRD_PARTY_EVENT_ID_MIN + 840)},
{ "EVT_COM2_TEST_SWICTH			", (THIRD_PARTY_EVENT_ID_MIN + 841)},
{ "EVT_COM2_OUTER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 842)},
{ "EVT_COM2_INNER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 843)},
{ "EVT_COM2_END_RANGE1				", EVT_COM2_INNER_SELECTOR },
{ "EVT_COM2_PNL_OFF_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 924)},
{ "EVT_COM2_START_RANGE2			", EVT_COM2_PNL_OFF_SWITCH },
{ "EVT_COM2_VHF1_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 925)},
{ "EVT_COM2_VHF2_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 927)},
{ "EVT_COM2_VHF3_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 929)},
{ "EVT_COM2_HF1_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 931)},
{ "EVT_COM2_AM_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 933)},
{ "EVT_COM2_HF2_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 935)},
{ "EVT_COM2_END_RANGE2				", EVT_COM2_HF2_SWITCH },

{ "EVT_COM3_TRANSFER_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 946)},
{ "EVT_COM3_START_RANGE1			", EVT_COM3_TRANSFER_SWITCH },
{ "EVT_COM3_HF_SENSOR_KNOB			", (THIRD_PARTY_EVENT_ID_MIN + 949)},
{ "EVT_COM3_TEST_SWICTH			", (THIRD_PARTY_EVENT_ID_MIN + 950)},
{ "EVT_COM3_OUTER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 951)},
{ "EVT_COM3_INNER_SELECTOR			", (THIRD_PARTY_EVENT_ID_MIN + 952)},
{ "EVT_COM3_END_RANGE1				", EVT_COM3_INNER_SELECTOR },
{ "EVT_COM3_PNL_OFF_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 953)},
{ "EVT_COM3_START_RANGE2			", EVT_COM3_PNL_OFF_SWITCH },
{ "EVT_COM3_VHF1_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 954)},
{ "EVT_COM3_VHF2_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 956)},
{ "EVT_COM3_VHF3_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 958)},
{ "EVT_COM3_HF1_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 960)},
{ "EVT_COM3_AM_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 962)},
{ "EVT_COM3_HF2_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 964)},
{ "EVT_COM3_END_RANGE2				", EVT_COM3_HF2_SWITCH },

// Audio Control Panels
//
// Captain ACP (at aft electronic panel)},
{ "EVT_ACP_CAPT_MIC_VHF1			", (THIRD_PARTY_EVENT_ID_MIN + 734)},
{ "EVT_ACP_CAPT_MIC_VHF2			", (THIRD_PARTY_EVENT_ID_MIN + 735)},
{ "EVT_ACP_CAPT_MIC_VHF3			", (THIRD_PARTY_EVENT_ID_MIN + 877)}, // out of order
{ "EVT_ACP_CAPT_MIC_HF1			", (THIRD_PARTY_EVENT_ID_MIN + 878)}, // out of order
{ "EVT_ACP_CAPT_MIC_HF2			", (THIRD_PARTY_EVENT_ID_MIN + 879)}, // out of order
{ "EVT_ACP_CAPT_MIC_FLT			", (THIRD_PARTY_EVENT_ID_MIN + 736)},
{ "EVT_ACP_CAPT_MIC_SVC			", (THIRD_PARTY_EVENT_ID_MIN + 737)},
{ "EVT_ACP_CAPT_MIC_PA				", (THIRD_PARTY_EVENT_ID_MIN + 738)},

{ "EVT_ACP_CAPT_REC_VHF1			", (THIRD_PARTY_EVENT_ID_MIN + 739)},
{ "EVT_ACP_CAPT_REC_VHF2			", (THIRD_PARTY_EVENT_ID_MIN + 740)},
{ "EVT_ACP_CAPT_REC_VHF3			", (THIRD_PARTY_EVENT_ID_MIN + 741)},
{ "EVT_ACP_CAPT_REC_HF1			", (THIRD_PARTY_EVENT_ID_MIN + 742)},
{ "EVT_ACP_CAPT_REC_HF2			", (THIRD_PARTY_EVENT_ID_MIN + 880)}, // out of order
{ "EVT_ACP_CAPT_REC_FLT			", (THIRD_PARTY_EVENT_ID_MIN + 743)},
{ "EVT_ACP_CAPT_REC_SVC			", (THIRD_PARTY_EVENT_ID_MIN + 744)},
{ "EVT_ACP_CAPT_REC_PA				", (THIRD_PARTY_EVENT_ID_MIN + 745)},
{ "EVT_ACP_CAPT_REC_NAV1			", (THIRD_PARTY_EVENT_ID_MIN + 746)},
{ "EVT_ACP_CAPT_REC_NAV2			", (THIRD_PARTY_EVENT_ID_MIN + 747)},
{ "EVT_ACP_CAPT_REC_ADF1			", (THIRD_PARTY_EVENT_ID_MIN + 748)},
{ "EVT_ACP_CAPT_REC_ADF2			", (THIRD_PARTY_EVENT_ID_MIN + 749)},
{ "EVT_ACP_CAPT_REC_MKR			", (THIRD_PARTY_EVENT_ID_MIN + 750)},
{ "EVT_ACP_CAPT_REC_SPKR			", (THIRD_PARTY_EVENT_ID_MIN + 751)},

{ "EVT_ACP_CAPT_RT_IC_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 752)},
{ "EVT_ACP_CAPT_MASK_BOOM_SWITCH	", (THIRD_PARTY_EVENT_ID_MIN + 753)},
{ "EVT_ACP_CAPT_FILTER_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 754)},
{ "EVT_ACP_CAPT_ALT_NORM_SWITCH	", (THIRD_PARTY_EVENT_ID_MIN + 755)},

{ "EVT_ACP_CAPT_FIRST1		", EVT_ACP_CAPT_MIC_VHF1 },
{ "EVT_ACP_CAPT_LAST1		", EVT_ACP_CAPT_ALT_NORM_SWITCH },
{ "EVT_ACP_CAPT_FIRST2		", EVT_ACP_CAPT_MIC_VHF3 },
{ "EVT_ACP_CAPT_LAST2		", EVT_ACP_CAPT_REC_HF2 },

// F/O ACP (at aft electronic panel)},
{ "EVT_ACP_FO_MIC_VHF1			", (THIRD_PARTY_EVENT_ID_MIN + 850)},
{ "EVT_ACP_FO_MIC_VHF2			", (THIRD_PARTY_EVENT_ID_MIN + 851)},
{ "EVT_ACP_FO_MIC_VHF3			", (THIRD_PARTY_EVENT_ID_MIN + 881)}, // out of order
{ "EVT_ACP_FO_MIC_HF1			", (THIRD_PARTY_EVENT_ID_MIN + 882)}, // out of order
{ "EVT_ACP_FO_MIC_HF2			", (THIRD_PARTY_EVENT_ID_MIN + 883)}, // out of order
{ "EVT_ACP_FO_MIC_FLT			", (THIRD_PARTY_EVENT_ID_MIN + 852)},
{ "EVT_ACP_FO_MIC_SVC			", (THIRD_PARTY_EVENT_ID_MIN + 853)},
{ "EVT_ACP_FO_MIC_PA			", (THIRD_PARTY_EVENT_ID_MIN + 854)},

{ "EVT_ACP_FO_REC_VHF1			", (THIRD_PARTY_EVENT_ID_MIN + 855)},
{ "EVT_ACP_FO_REC_VHF2			", (THIRD_PARTY_EVENT_ID_MIN + 856)},
{ "EVT_ACP_FO_REC_VHF3			", (THIRD_PARTY_EVENT_ID_MIN + 857)},
{ "EVT_ACP_FO_REC_HF1			", (THIRD_PARTY_EVENT_ID_MIN + 858)},
{ "EVT_ACP_FO_REC_HF2			", (THIRD_PARTY_EVENT_ID_MIN + 884)}, // out of order
{ "EVT_ACP_FO_REC_FLT			", (THIRD_PARTY_EVENT_ID_MIN + 859)},
{ "EVT_ACP_FO_REC_SVC			", (THIRD_PARTY_EVENT_ID_MIN + 860)},
{ "EVT_ACP_FO_REC_PA			", (THIRD_PARTY_EVENT_ID_MIN + 861)},
{ "EVT_ACP_FO_REC_NAV1			", (THIRD_PARTY_EVENT_ID_MIN + 862)},
{ "EVT_ACP_FO_REC_NAV2			", (THIRD_PARTY_EVENT_ID_MIN + 863)},
{ "EVT_ACP_FO_REC_ADF1			", (THIRD_PARTY_EVENT_ID_MIN + 864)},
{ "EVT_ACP_FO_REC_ADF2			", (THIRD_PARTY_EVENT_ID_MIN + 865)},
{ "EVT_ACP_FO_REC_MKR			", (THIRD_PARTY_EVENT_ID_MIN + 866)},
{ "EVT_ACP_FO_REC_SPKR			", (THIRD_PARTY_EVENT_ID_MIN + 867)},

{ "EVT_ACP_FO_VOL_NAV1			", (THIRD_PARTY_EVENT_ID_MIN + 1862)}, // 1000 added for volume rotation event
{ "EVT_ACP_FO_VOL_NAV2			", (THIRD_PARTY_EVENT_ID_MIN + 1863)},
{ "EVT_ACP_FO_VOL_ADF1			", (THIRD_PARTY_EVENT_ID_MIN + 1864)},
{ "EVT_ACP_FO_VOL_ADF2			", (THIRD_PARTY_EVENT_ID_MIN + 1865)},
{ "EVT_ACP_FO_VOL_MKR			", (THIRD_PARTY_EVENT_ID_MIN + 1866)},

{ "EVT_ACP_FO_RT_IC_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 868)},
{ "EVT_ACP_FO_MASK_BOOM_SWITCH	", (THIRD_PARTY_EVENT_ID_MIN + 869)},
{ "EVT_ACP_FO_FILTER_SWITCH	", (THIRD_PARTY_EVENT_ID_MIN + 870)},
{ "EVT_ACP_FO_ALT_NORM_SWITCH	", (THIRD_PARTY_EVENT_ID_MIN + 871)},

{ "EVT_ACP_FO_FIRST1		", EVT_ACP_FO_MIC_VHF1 },
{ "EVT_ACP_FO_LAST1		", EVT_ACP_FO_ALT_NORM_SWITCH },
{ "EVT_ACP_FO_FIRST2		", EVT_ACP_FO_MIC_VHF3 },
{ "EVT_ACP_FO_LAST2		", EVT_ACP_FO_REC_HF2 },

// Observer ACP(at aft electronic panel)},
{ "EVT_ACP_OBS_MIC_VHF1		", (THIRD_PARTY_EVENT_ID_MIN + 291)},
{ "EVT_ACP_OBS_MIC_VHF2		", (THIRD_PARTY_EVENT_ID_MIN + 292)},
{ "EVT_ACP_OBS_MIC_VHF3		", (THIRD_PARTY_EVENT_ID_MIN + 293)},
{ "EVT_ACP_OBS_MIC_HF1			", (THIRD_PARTY_EVENT_ID_MIN + 294)},
{ "EVT_ACP_OBS_MIC_HF2			", (THIRD_PARTY_EVENT_ID_MIN + 295)},
{ "EVT_ACP_OBS_MIC_FLT			", (THIRD_PARTY_EVENT_ID_MIN + 296)},
{ "EVT_ACP_OBS_MIC_SVC			", (THIRD_PARTY_EVENT_ID_MIN + 297)},
{ "EVT_ACP_OBS_MIC_PA			", (THIRD_PARTY_EVENT_ID_MIN + 873)}, // out of order

{ "EVT_ACP_OBS_REC_VHF1		", (THIRD_PARTY_EVENT_ID_MIN + 286)},
{ "EVT_ACP_OBS_REC_VHF2		", (THIRD_PARTY_EVENT_ID_MIN + 287)},
{ "EVT_ACP_OBS_REC_VHF3		", (THIRD_PARTY_EVENT_ID_MIN + 874)}, // out of order
{ "EVT_ACP_OBS_REC_HF1			", (THIRD_PARTY_EVENT_ID_MIN + 875)}, // out of order
{ "EVT_ACP_OBS_REC_HF2			", (THIRD_PARTY_EVENT_ID_MIN + 876)}, // out of order
{ "EVT_ACP_OBS_REC_FLT			", (THIRD_PARTY_EVENT_ID_MIN + 288)},
{ "EVT_ACP_OBS_REC_SVC			", (THIRD_PARTY_EVENT_ID_MIN + 289)},
{ "EVT_ACP_OBS_REC_PA			", (THIRD_PARTY_EVENT_ID_MIN + 290)},
{ "EVT_ACP_OBS_REC_NAV1		", (THIRD_PARTY_EVENT_ID_MIN + 280)},
{ "EVT_ACP_OBS_REC_NAV2		", (THIRD_PARTY_EVENT_ID_MIN + 281)},
{ "EVT_ACP_OBS_REC_ADF1		", (THIRD_PARTY_EVENT_ID_MIN + 282)},
{ "EVT_ACP_OBS_REC_ADF2		", (THIRD_PARTY_EVENT_ID_MIN + 283)},
{ "EVT_ACP_OBS_REC_MKR			", (THIRD_PARTY_EVENT_ID_MIN + 284)},
{ "EVT_ACP_OBS_REC_SPKR		", (THIRD_PARTY_EVENT_ID_MIN + 285)},

{ "EVT_ACP_OBS_VOL_NAV1		", (THIRD_PARTY_EVENT_ID_MIN + 1280)}, // 1000 added for volume rotation event
{ "EVT_ACP_OBS_VOL_NAV2		", (THIRD_PARTY_EVENT_ID_MIN + 1281)},
{ "EVT_ACP_OBS_VOL_ADF1		", (THIRD_PARTY_EVENT_ID_MIN + 1282)},
{ "EVT_ACP_OBS_VOL_ADF2		", (THIRD_PARTY_EVENT_ID_MIN + 1283)},
{ "EVT_ACP_OBS_VOL_MKR			", (THIRD_PARTY_EVENT_ID_MIN + 1284)},

{ "EVT_ACP_OBS_RT_IC_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 276)},
{ "EVT_ACP_OBS_MASK_BOOM_SWITCH	", (THIRD_PARTY_EVENT_ID_MIN + 277)},
{ "EVT_ACP_OBS_FILTER_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 278)},
{ "EVT_ACP_OBS_ALT_NORM_SWITCH		", (THIRD_PARTY_EVENT_ID_MIN + 279)},

{ "EVT_ACP_OBS_FIRST1		", EVT_ACP_OBS_RT_IC_SWITCH },
{ "EVT_ACP_OBS_LAST1		", EVT_ACP_OBS_MIC_SVC},
{ "EVT_ACP_OBS_FIRST2		", EVT_ACP_OBS_MIC_PA },
{ "EVT_ACP_OBS_LAST2		", EVT_ACP_OBS_REC_HF2 },

// WX RADAR panel
{ "EVT_WXR_L_TFR									", (THIRD_PARTY_EVENT_ID_MIN + 790)},
{ "EVT_WXR_L_WX									", (THIRD_PARTY_EVENT_ID_MIN + 791)},
{ "EVT_WXR_L_WX_T									", (THIRD_PARTY_EVENT_ID_MIN + 916)},
{ "EVT_WXR_L_MAP									", (THIRD_PARTY_EVENT_ID_MIN + 792)},
{ "EVT_WXR_L_GC									", (THIRD_PARTY_EVENT_ID_MIN + 793)},
{ "EVT_WXR_AUTO									", (THIRD_PARTY_EVENT_ID_MIN + 917)},
{ "EVT_WXR_TEST									", (THIRD_PARTY_EVENT_ID_MIN + 918)},
{ "EVT_WXR_R_TFR									", (THIRD_PARTY_EVENT_ID_MIN + 919)},
{ "EVT_WXR_R_WX									", (THIRD_PARTY_EVENT_ID_MIN + 796)},
{ "EVT_WXR_R_WX_T									", (THIRD_PARTY_EVENT_ID_MIN + 920)},
{ "EVT_WXR_R_MAP									", (THIRD_PARTY_EVENT_ID_MIN + 797)},
{ "EVT_WXR_R_GC									", (THIRD_PARTY_EVENT_ID_MIN + 921)},
{ "EVT_WXR_L_TILT_CONTROL							", (THIRD_PARTY_EVENT_ID_MIN + 794)},
{ "EVT_WXR_L_GAIN_CONTROL							", (THIRD_PARTY_EVENT_ID_MIN + 923)},
{ "EVT_WXR_R_TILT_CONTROL							", (THIRD_PARTY_EVENT_ID_MIN + 795)},
{ "EVT_WXR_R_GAIN_CONTROL							", (THIRD_PARTY_EVENT_ID_MIN + 922)},
//{ "EVT_WXR_L_R									", (THIRD_PARTY_EVENT_ID_MIN + 917)},

// TCAS
{ "EVT_TCAS_XPNDR				", (THIRD_PARTY_EVENT_ID_MIN + 798)},
{ "EVT_TCAS_MODE				", (THIRD_PARTY_EVENT_ID_MIN + 800)},
{ "EVT_TCAS_TEST				", (THIRD_PARTY_EVENT_ID_MIN + 801)},
{ "EVT_TCAS_ALTSOURCE			", (THIRD_PARTY_EVENT_ID_MIN + 803)},
{ "EVT_TCAS_KNOB1				", (THIRD_PARTY_EVENT_ID_MIN + 804)},
{ "EVT_TCAS_KNOB2				", (THIRD_PARTY_EVENT_ID_MIN + 805)},
{ "EVT_TCAS_IDENT				", (THIRD_PARTY_EVENT_ID_MIN + 806)},
{ "EVT_TCAS_KNOB4				", (THIRD_PARTY_EVENT_ID_MIN + 807)},
{ "EVT_TCAS_KNOB3				", (THIRD_PARTY_EVENT_ID_MIN + 808)},

// HUD control panel
{ "EVT_HUD_MODE				", (THIRD_PARTY_EVENT_ID_MIN + 770)},	// 
{ "EVT_HUD_STB					", (THIRD_PARTY_EVENT_ID_MIN + 771)},	// 
{ "EVT_HUD_RWY					", (THIRD_PARTY_EVENT_ID_MIN + 772)},	// 
{ "EVT_HUD_GS					", (THIRD_PARTY_EVENT_ID_MIN + 773)},	// 
{ "EVT_HUD_CLR					", (THIRD_PARTY_EVENT_ID_MIN + 775)},	// 
{ "EVT_HUD_BRT					", (THIRD_PARTY_EVENT_ID_MIN + 776)},	// 
{ "EVT_HUD_DIM					", (THIRD_PARTY_EVENT_ID_MIN + 777)},	// 
{ "EVT_HUD_1					", (THIRD_PARTY_EVENT_ID_MIN + 778)},	// 
{ "EVT_HUD_2					", (THIRD_PARTY_EVENT_ID_MIN + 779)},	// 
{ "EVT_HUD_3					", (THIRD_PARTY_EVENT_ID_MIN + 780)},	// 
{ "EVT_HUD_4					", (THIRD_PARTY_EVENT_ID_MIN + 781)},	// 
{ "EVT_HUD_5					", (THIRD_PARTY_EVENT_ID_MIN + 782)},	// 
{ "EVT_HUD_6					", (THIRD_PARTY_EVENT_ID_MIN + 783)},	// 
{ "EVT_HUD_7					", (THIRD_PARTY_EVENT_ID_MIN + 784)},	// 
{ "EVT_HUD_8					", (THIRD_PARTY_EVENT_ID_MIN + 785)},	// 
{ "EVT_HUD_9					", (THIRD_PARTY_EVENT_ID_MIN + 786)},	// 
{ "EVT_HUD_0					", (THIRD_PARTY_EVENT_ID_MIN + 788)},	// 
{ "EVT_HUD_ENTER				", (THIRD_PARTY_EVENT_ID_MIN + 787)},	// 
{ "EVT_HUD_TEST				", (THIRD_PARTY_EVENT_ID_MIN + 789)},	// 
{ "EVT_HUD_STOW				", (THIRD_PARTY_EVENT_ID_MIN + 979)},	// 
{ "EVT_HUD_BRIGTHNESS			", (THIRD_PARTY_EVENT_ID_MIN + 980)},	//
{ "EVT_HUD_AUTO_MAN			", (THIRD_PARTY_EVENT_ID_MIN + 981)},	//

// HUD Annunciator Panel
{ "EVT_HGS_FAIL_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 522)},	//


// CDU
{ "EVT_CDU_L_L1								", (THIRD_PARTY_EVENT_ID_MIN + 534)},
{ "EVT_CDU_L_L2								", (THIRD_PARTY_EVENT_ID_MIN + 535)},
{ "EVT_CDU_L_L3								", (THIRD_PARTY_EVENT_ID_MIN + 536)},
{ "EVT_CDU_L_L4								", (THIRD_PARTY_EVENT_ID_MIN + 537)},
{ "EVT_CDU_L_L5								", (THIRD_PARTY_EVENT_ID_MIN + 538)},
{ "EVT_CDU_L_L6								", (THIRD_PARTY_EVENT_ID_MIN + 539)},
{ "EVT_CDU_L_R1								", (THIRD_PARTY_EVENT_ID_MIN + 540)},
{ "EVT_CDU_L_R2								", (THIRD_PARTY_EVENT_ID_MIN + 541)},
{ "EVT_CDU_L_R3								", (THIRD_PARTY_EVENT_ID_MIN + 542)},
{ "EVT_CDU_L_R4								", (THIRD_PARTY_EVENT_ID_MIN + 543)},
{ "EVT_CDU_L_R5								", (THIRD_PARTY_EVENT_ID_MIN + 544)},
{ "EVT_CDU_L_R6								", (THIRD_PARTY_EVENT_ID_MIN + 545)},
{ "EVT_CDU_L_INIT_REF							", (THIRD_PARTY_EVENT_ID_MIN + 546)},
{ "EVT_CDU_L_RTE								", (THIRD_PARTY_EVENT_ID_MIN + 547)},
{ "EVT_CDU_L_CLB								", (THIRD_PARTY_EVENT_ID_MIN + 548)},
{ "EVT_CDU_L_CRZ								", (THIRD_PARTY_EVENT_ID_MIN + 549)},
{ "EVT_CDU_L_DES								", (THIRD_PARTY_EVENT_ID_MIN + 550)},
{ "EVT_CDU_L_MENU								", (THIRD_PARTY_EVENT_ID_MIN + 551)},
{ "EVT_CDU_L_LEGS								", (THIRD_PARTY_EVENT_ID_MIN + 552)},
{ "EVT_CDU_L_DEP_ARR							", (THIRD_PARTY_EVENT_ID_MIN + 553)},
{ "EVT_CDU_L_HOLD								", (THIRD_PARTY_EVENT_ID_MIN + 554)},
{ "EVT_CDU_L_PROG								", (THIRD_PARTY_EVENT_ID_MIN + 555)},
{ "EVT_CDU_L_EXEC								", (THIRD_PARTY_EVENT_ID_MIN + 556)},
{ "EVT_CDU_L_N1_LIMIT							", (THIRD_PARTY_EVENT_ID_MIN + 557)},
{ "EVT_CDU_L_FIX								", (THIRD_PARTY_EVENT_ID_MIN + 558)},
{ "EVT_CDU_L_PREV_PAGE							", (THIRD_PARTY_EVENT_ID_MIN + 559)},
{ "EVT_CDU_L_NEXT_PAGE							", (THIRD_PARTY_EVENT_ID_MIN + 560)},
{ "EVT_CDU_L_1									", (THIRD_PARTY_EVENT_ID_MIN + 561)},
{ "EVT_CDU_L_2									", (THIRD_PARTY_EVENT_ID_MIN + 562)},
{ "EVT_CDU_L_3									", (THIRD_PARTY_EVENT_ID_MIN + 563)},
{ "EVT_CDU_L_4									", (THIRD_PARTY_EVENT_ID_MIN + 564)},
{ "EVT_CDU_L_5									", (THIRD_PARTY_EVENT_ID_MIN + 565)},
{ "EVT_CDU_L_6									", (THIRD_PARTY_EVENT_ID_MIN + 566)},
{ "EVT_CDU_L_7									", (THIRD_PARTY_EVENT_ID_MIN + 567)},
{ "EVT_CDU_L_8									", (THIRD_PARTY_EVENT_ID_MIN + 568)},
{ "EVT_CDU_L_9									", (THIRD_PARTY_EVENT_ID_MIN + 569)},
{ "EVT_CDU_L_DOT								", (THIRD_PARTY_EVENT_ID_MIN + 570)},
{ "EVT_CDU_L_0									", (THIRD_PARTY_EVENT_ID_MIN + 571)},
{ "EVT_CDU_L_PLUS_MINUS						", (THIRD_PARTY_EVENT_ID_MIN + 572)},
{ "EVT_CDU_L_A									", (THIRD_PARTY_EVENT_ID_MIN + 573)},
{ "EVT_CDU_L_B									", (THIRD_PARTY_EVENT_ID_MIN + 574)},
{ "EVT_CDU_L_C									", (THIRD_PARTY_EVENT_ID_MIN + 575)},
{ "EVT_CDU_L_D									", (THIRD_PARTY_EVENT_ID_MIN + 576)},
{ "EVT_CDU_L_E									", (THIRD_PARTY_EVENT_ID_MIN + 577)},
{ "EVT_CDU_L_F									", (THIRD_PARTY_EVENT_ID_MIN + 578)},
{ "EVT_CDU_L_G									", (THIRD_PARTY_EVENT_ID_MIN + 579)},
{ "EVT_CDU_L_H									", (THIRD_PARTY_EVENT_ID_MIN + 580)},
{ "EVT_CDU_L_I									", (THIRD_PARTY_EVENT_ID_MIN + 581)},
{ "EVT_CDU_L_J									", (THIRD_PARTY_EVENT_ID_MIN + 582)},
{ "EVT_CDU_L_K									", (THIRD_PARTY_EVENT_ID_MIN + 583)},
{ "EVT_CDU_L_L									", (THIRD_PARTY_EVENT_ID_MIN + 584)},
{ "EVT_CDU_L_M									", (THIRD_PARTY_EVENT_ID_MIN + 585)},
{ "EVT_CDU_L_N									", (THIRD_PARTY_EVENT_ID_MIN + 586)},
{ "EVT_CDU_L_O									", (THIRD_PARTY_EVENT_ID_MIN + 587)},
{ "EVT_CDU_L_P									", (THIRD_PARTY_EVENT_ID_MIN + 588)},
{ "EVT_CDU_L_Q									", (THIRD_PARTY_EVENT_ID_MIN + 589)},
{ "EVT_CDU_L_R									", (THIRD_PARTY_EVENT_ID_MIN + 590)},
{ "EVT_CDU_L_S									", (THIRD_PARTY_EVENT_ID_MIN + 591)},
{ "EVT_CDU_L_T									", (THIRD_PARTY_EVENT_ID_MIN + 592)},
{ "EVT_CDU_L_U									", (THIRD_PARTY_EVENT_ID_MIN + 593)},
{ "EVT_CDU_L_V									", (THIRD_PARTY_EVENT_ID_MIN + 594)},
{ "EVT_CDU_L_W									", (THIRD_PARTY_EVENT_ID_MIN + 595)},
{ "EVT_CDU_L_X									", (THIRD_PARTY_EVENT_ID_MIN + 596)},
{ "EVT_CDU_L_Y									", (THIRD_PARTY_EVENT_ID_MIN + 597)},
{ "EVT_CDU_L_Z									", (THIRD_PARTY_EVENT_ID_MIN + 598)},
{ "EVT_CDU_L_SPACE								", (THIRD_PARTY_EVENT_ID_MIN + 599)},
{ "EVT_CDU_L_DEL								", (THIRD_PARTY_EVENT_ID_MIN + 600)},
{ "EVT_CDU_L_SLASH								", (THIRD_PARTY_EVENT_ID_MIN + 601)},
{ "EVT_CDU_L_CLR								", (THIRD_PARTY_EVENT_ID_MIN + 602)},
{ "EVT_CDU_L_BRITENESS							", (THIRD_PARTY_EVENT_ID_MIN + 605)},

{ "EVT_CDU_R_L1								", (THIRD_PARTY_EVENT_ID_MIN + 606)},
{ "EVT_CDU_R_L2								", (THIRD_PARTY_EVENT_ID_MIN + 607)},
{ "EVT_CDU_R_L3								", (THIRD_PARTY_EVENT_ID_MIN + 608)},
{ "EVT_CDU_R_L4								", (THIRD_PARTY_EVENT_ID_MIN + 609)},
{ "EVT_CDU_R_L5								", (THIRD_PARTY_EVENT_ID_MIN + 610)},
{ "EVT_CDU_R_L6								", (THIRD_PARTY_EVENT_ID_MIN + 611)},
{ "EVT_CDU_R_R1								", (THIRD_PARTY_EVENT_ID_MIN + 612)},
{ "EVT_CDU_R_R2								", (THIRD_PARTY_EVENT_ID_MIN + 613)},
{ "EVT_CDU_R_R3								", (THIRD_PARTY_EVENT_ID_MIN + 614)},
{ "EVT_CDU_R_R4								", (THIRD_PARTY_EVENT_ID_MIN + 615)},
{ "EVT_CDU_R_R5								", (THIRD_PARTY_EVENT_ID_MIN + 616)},
{ "EVT_CDU_R_R6								", (THIRD_PARTY_EVENT_ID_MIN + 617)},
{ "EVT_CDU_R_INIT_REF							", (THIRD_PARTY_EVENT_ID_MIN + 618)},
{ "EVT_CDU_R_RTE								", (THIRD_PARTY_EVENT_ID_MIN + 619)},
{ "EVT_CDU_R_CLB								", (THIRD_PARTY_EVENT_ID_MIN + 620)},
{ "EVT_CDU_R_CRZ								", (THIRD_PARTY_EVENT_ID_MIN + 621)},
{ "EVT_CDU_R_DES								", (THIRD_PARTY_EVENT_ID_MIN + 622)},
{ "EVT_CDU_R_MENU								", (THIRD_PARTY_EVENT_ID_MIN + 623)},
{ "EVT_CDU_R_LEGS								", (THIRD_PARTY_EVENT_ID_MIN + 624)},
{ "EVT_CDU_R_DEP_ARR							", (THIRD_PARTY_EVENT_ID_MIN + 625)},
{ "EVT_CDU_R_HOLD								", (THIRD_PARTY_EVENT_ID_MIN + 626)},
{ "EVT_CDU_R_PROG								", (THIRD_PARTY_EVENT_ID_MIN + 627)},
{ "EVT_CDU_R_EXEC								", (THIRD_PARTY_EVENT_ID_MIN + 628)},
{ "EVT_CDU_R_N1_LIMIT							", (THIRD_PARTY_EVENT_ID_MIN + 629)},
{ "EVT_CDU_R_FIX								", (THIRD_PARTY_EVENT_ID_MIN + 630)},
{ "EVT_CDU_R_PREV_PAGE							", (THIRD_PARTY_EVENT_ID_MIN + 631)},
{ "EVT_CDU_R_NEXT_PAGE							", (THIRD_PARTY_EVENT_ID_MIN + 632)},
{ "EVT_CDU_R_1									", (THIRD_PARTY_EVENT_ID_MIN + 633)},
{ "EVT_CDU_R_2									", (THIRD_PARTY_EVENT_ID_MIN + 634)},
{ "EVT_CDU_R_3									", (THIRD_PARTY_EVENT_ID_MIN + 635)},
{ "EVT_CDU_R_4									", (THIRD_PARTY_EVENT_ID_MIN + 636)},
{ "EVT_CDU_R_5									", (THIRD_PARTY_EVENT_ID_MIN + 637)},
{ "EVT_CDU_R_6									", (THIRD_PARTY_EVENT_ID_MIN + 638)},
{ "EVT_CDU_R_7									", (THIRD_PARTY_EVENT_ID_MIN + 639)},
{ "EVT_CDU_R_8									", (THIRD_PARTY_EVENT_ID_MIN + 640)},
{ "EVT_CDU_R_9									", (THIRD_PARTY_EVENT_ID_MIN + 641)},
{ "EVT_CDU_R_DOT								", (THIRD_PARTY_EVENT_ID_MIN + 642)},
{ "EVT_CDU_R_0									", (THIRD_PARTY_EVENT_ID_MIN + 643)},
{ "EVT_CDU_R_PLUS_MINUS						", (THIRD_PARTY_EVENT_ID_MIN + 644)},
{ "EVT_CDU_R_A									", (THIRD_PARTY_EVENT_ID_MIN + 645)},
{ "EVT_CDU_R_B									", (THIRD_PARTY_EVENT_ID_MIN + 646)},
{ "EVT_CDU_R_C									", (THIRD_PARTY_EVENT_ID_MIN + 647)},
{ "EVT_CDU_R_D									", (THIRD_PARTY_EVENT_ID_MIN + 648)},
{ "EVT_CDU_R_E									", (THIRD_PARTY_EVENT_ID_MIN + 649)},
{ "EVT_CDU_R_F									", (THIRD_PARTY_EVENT_ID_MIN + 650)},
{ "EVT_CDU_R_G									", (THIRD_PARTY_EVENT_ID_MIN + 651)},
{ "EVT_CDU_R_H									", (THIRD_PARTY_EVENT_ID_MIN + 652)},
{ "EVT_CDU_R_I									", (THIRD_PARTY_EVENT_ID_MIN + 653)},
{ "EVT_CDU_R_J									", (THIRD_PARTY_EVENT_ID_MIN + 654)},
{ "EVT_CDU_R_K									", (THIRD_PARTY_EVENT_ID_MIN + 655)},
{ "EVT_CDU_R_L									", (THIRD_PARTY_EVENT_ID_MIN + 656)},
{ "EVT_CDU_R_M									", (THIRD_PARTY_EVENT_ID_MIN + 657)},
{ "EVT_CDU_R_N									", (THIRD_PARTY_EVENT_ID_MIN + 658)},
{ "EVT_CDU_R_O									", (THIRD_PARTY_EVENT_ID_MIN + 659)},
{ "EVT_CDU_R_P									", (THIRD_PARTY_EVENT_ID_MIN + 660)},
{ "EVT_CDU_R_Q									", (THIRD_PARTY_EVENT_ID_MIN + 661)},
{ "EVT_CDU_R_R									", (THIRD_PARTY_EVENT_ID_MIN + 662)},
{ "EVT_CDU_R_S									", (THIRD_PARTY_EVENT_ID_MIN + 663)},
{ "EVT_CDU_R_T									", (THIRD_PARTY_EVENT_ID_MIN + 664)},
{ "EVT_CDU_R_U									", (THIRD_PARTY_EVENT_ID_MIN + 665)},
{ "EVT_CDU_R_V									", (THIRD_PARTY_EVENT_ID_MIN + 666)},
{ "EVT_CDU_R_W									", (THIRD_PARTY_EVENT_ID_MIN + 667)},
{ "EVT_CDU_R_X									", (THIRD_PARTY_EVENT_ID_MIN + 668)},
{ "EVT_CDU_R_Y									", (THIRD_PARTY_EVENT_ID_MIN + 669)},
{ "EVT_CDU_R_Z									", (THIRD_PARTY_EVENT_ID_MIN + 670)},
{ "EVT_CDU_R_SPACE								", (THIRD_PARTY_EVENT_ID_MIN + 671)},
{ "EVT_CDU_R_DEL								", (THIRD_PARTY_EVENT_ID_MIN + 672)},
{ "EVT_CDU_R_SLASH								", (THIRD_PARTY_EVENT_ID_MIN + 673)},
{ "EVT_CDU_R_CLR								", (THIRD_PARTY_EVENT_ID_MIN + 674)},
{ "EVT_CDU_R_BRITENESS							", (THIRD_PARTY_EVENT_ID_MIN + 677)},

// Fire protection panel
{ "EVT_FIRE_OVHT_DET_SWITCH_1					", (THIRD_PARTY_EVENT_ID_MIN + 694)},
{ "EVT_FIRE_DETECTION_TEST_SWITCH				", (THIRD_PARTY_EVENT_ID_MIN + 696)},
{ "EVT_FIRE_HANDLE_ENGINE_1_TOP				", (THIRD_PARTY_EVENT_ID_MIN + 697)},
{ "EVT_FIRE_HANDLE_ENGINE_1_BOTTOM				", (THIRD_PARTY_EVENT_ID_MIN + 6971)},
{ "EVT_FIRE_HANDLE_APU_TOP						", (THIRD_PARTY_EVENT_ID_MIN + 698)},
{ "EVT_FIRE_HANDLE_APU_BOTTOM					", (THIRD_PARTY_EVENT_ID_MIN + 6981)},
{ "EVT_FIRE_HANDLE_ENGINE_2_TOP				", (THIRD_PARTY_EVENT_ID_MIN + 699)},
{ "EVT_FIRE_HANDLE_ENGINE_2_BOTTOM				", (THIRD_PARTY_EVENT_ID_MIN + 6991)},
{ "EVT_FIRE_BELL_CUTOUT_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 704)},
{ "EVT_FIRE_OVHT_DET_SWITCH_2					", (THIRD_PARTY_EVENT_ID_MIN + 705)},
{ "EVT_FIRE_EXTINGUISHER_TEST_SWITCH			", (THIRD_PARTY_EVENT_ID_MIN + 715)},
{ "EVT_FIRE_UNLOCK_SWITCH_ENGINE_1				", (THIRD_PARTY_EVENT_ID_MIN + 976)},
{ "EVT_FIRE_UNLOCK_SWITCH_APU					", (THIRD_PARTY_EVENT_ID_MIN + 977)},
{ "EVT_FIRE_UNLOCK_SWITCH_ENGINE_2				", (THIRD_PARTY_EVENT_ID_MIN + 978)},

// Cargo Fire
{ "EVT_CARGO_FIRE_DET_SEL_SWITCH_FWD			", (THIRD_PARTY_EVENT_ID_MIN + 760)},
{ "EVT_CARGO_FIRE_DET_SEL_SWITCH_AFT			", (THIRD_PARTY_EVENT_ID_MIN + 761)},
{ "EVT_CARGO_FIRE_ARM_SWITCH_FWD				", (THIRD_PARTY_EVENT_ID_MIN + 764)},
{ "EVT_CARGO_FIRE_ARM_SWITCH_AFT				", (THIRD_PARTY_EVENT_ID_MIN + 766)},
{ "EVT_CARGO_FIRE_DISC_SWITCH_GUARD			", (THIRD_PARTY_EVENT_ID_MIN + 767)},
{ "EVT_CARGO_FIRE_DISC_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 768)},
{ "EVT_CARGO_FIRE_TEST_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 769)},

// Flight controls - pedestal
{ "EVT_FCTL_AILERON_TRIM						", (THIRD_PARTY_EVENT_ID_MIN + 810)},
{ "EVT_FCTL_RUDDER_TRIM						", (THIRD_PARTY_EVENT_ID_MIN + 811)},

// Pedestal Lights Controls
{ "EVT_PED_FLOOD_CONTROL						", (THIRD_PARTY_EVENT_ID_MIN + 756)},
{ "EVT_PED_PANEL_CONTROL						", (THIRD_PARTY_EVENT_ID_MIN + 757)},

// Custom shortcut special events
{ "EVT_LDG_LIGHTS_TOGGLE						", (THIRD_PARTY_EVENT_ID_MIN + 14000)},
{ "EVT_TURNOFF_LIGHTS_TOGGLE					", (THIRD_PARTY_EVENT_ID_MIN + 14001)},
{ "EVT_COCKPIT_LIGHTS_TOGGLE					", (THIRD_PARTY_EVENT_ID_MIN + 14002)},
{ "EVT_COCKPIT_LIGHTS_ON						", (THIRD_PARTY_EVENT_ID_MIN + 14003)},
{ "EVT_COCKPIT_LIGHTS_OFF						", (THIRD_PARTY_EVENT_ID_MIN + 14004)},
{ "EVT_DOOR_FWD_L								", (THIRD_PARTY_EVENT_ID_MIN + 14005)},
{ "EVT_DOOR_FWD_R								", (THIRD_PARTY_EVENT_ID_MIN + 14006)},
{ "EVT_DOOR_AFT_L								", (THIRD_PARTY_EVENT_ID_MIN + 14007)},
{ "EVT_DOOR_AFT_R								", (THIRD_PARTY_EVENT_ID_MIN + 14008)},
{ "EVT_DOOR_OVERWING_EXIT_L					", (THIRD_PARTY_EVENT_ID_MIN + 14009)},
{ "EVT_DOOR_OVERWING_EXIT_R					", (THIRD_PARTY_EVENT_ID_MIN + 14010)},
{ "EVT_DOOR_CARGO_FWD							", (THIRD_PARTY_EVENT_ID_MIN + 14013)},  // note number skip to match eDoors enum
{ "EVT_DOOR_CARGO_AFT							", (THIRD_PARTY_EVENT_ID_MIN + 14014)},
{ "EVT_DOOR_EQUIPMENT_HATCH					", (THIRD_PARTY_EVENT_ID_MIN + 14015)},
{ "EVT_DOOR_AIRSTAIR							", (THIRD_PARTY_EVENT_ID_MIN + 14016)},

// Yoke Animations
{ "EVT_YOKE_L_COUNTER_1						", (THIRD_PARTY_EVENT_ID_MIN + 998)},	// Counters (digits left to right)},  
{ "EVT_YOKE_L_COUNTER_2						", (THIRD_PARTY_EVENT_ID_MIN + 999)},
{ "EVT_YOKE_L_COUNTER_3						", (THIRD_PARTY_EVENT_ID_MIN + 1000)},
{ "EVT_YOKE_R_COUNTER_1						", (THIRD_PARTY_EVENT_ID_MIN + 1001)},
{ "EVT_YOKE_R_COUNTER_2						", (THIRD_PARTY_EVENT_ID_MIN + 1002)},
{ "EVT_YOKE_R_COUNTER_3						", (THIRD_PARTY_EVENT_ID_MIN + 1003)},
{ "EVT_YOKE_L_AP_DISC_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 1004)},	// AP Disconnect switches
{ "EVT_YOKE_R_AP_DISC_SWITCH					", (THIRD_PARTY_EVENT_ID_MIN + 1005)},

// MCP Direct Control 
{ "EVT_MCP_CRS_L_SET							", (THIRD_PARTY_EVENT_ID_MIN + 14500)},	// Sets MCP course specified by the event parameter
{ "EVT_MCP_CRS_R_SET							", (THIRD_PARTY_EVENT_ID_MIN + 14501)},
{ "EVT_MCP_IAS_SET								", (THIRD_PARTY_EVENT_ID_MIN + 14502)},	// Sets MCP IAS, if IAS mode is active
{ "EVT_MCP_MACH_SET							", (THIRD_PARTY_EVENT_ID_MIN + 14503)},	// Sets MCP MACH (if active)}, to parameter*0.01 (e.g. send 78 to set M0.78)},
{ "EVT_MCP_HDG_SET								", (THIRD_PARTY_EVENT_ID_MIN + 14504)},	// Sets new heading, commands the shortest turn
{ "EVT_MCP_ALT_SET								", (THIRD_PARTY_EVENT_ID_MIN + 14505)},
{ "EVT_MCP_VS_SET								", (THIRD_PARTY_EVENT_ID_MIN + 14506)},	// Sets MCP VS (if VS window open)}, to parameter-10000 (e.g. send 8200 for -1800fpm)},

// Pressurization Direct Control
{ "EVT_OH_PRESS_FLT_ALT_SET					", (THIRD_PARTY_EVENT_ID_MIN + 14507)},
{ "EVT_OH_PRESS_LAND_ALT_SET					", (THIRD_PARTY_EVENT_ID_MIN + 14508)},

// Panel system events
{ "EVT_CTRL_ACCELERATION_DISABLE				", (THIRD_PARTY_EVENT_ID_MIN + 14600)},
{ "EVT_CTRL_ACCELERATION_ENABLE				", (THIRD_PARTY_EVENT_ID_MIN + 14600)}
};


// ^\s*(((\S+)\s*){1,2})(\s+)(\S+);
// {sizeof($ 1),$4"$5"},
static class PMDG_MAUSE_EVENTS
{
public:
	const char * szmouseEventName;
	unsigned int mouseEventID;
};

static const std::vector<PMDG_MAUSE_EVENTS> PMDGMouseEvents{
{"MOUSE_FLAG_RIGHTSINGLE",0x80000000},
{"MOUSE_FLAG_MIDDLESINGLE",0x40000000},
{"MOUSE_FLAG_LEFTSINGLE",0x20000000},
{"MOUSE_FLAG_RIGHTDOUBLE",0x10000000},
{"MOUSE_FLAG_MIDDLEDOUBLE",0x08000000},
{"MOUSE_FLAG_LEFTDOUBLE",0x04000000},
{"MOUSE_FLAG_RIGHTDRAG",0x02000000},
{"MOUSE_FLAG_MIDDLEDRAG",0x01000000},
{"MOUSE_FLAG_LEFTDRAG",0x00800000},
{"MOUSE_FLAG_MOVE",0x00400000},
{"MOUSE_FLAG_DOWN_REPEAT",0x00200000},
{"MOUSE_FLAG_RIGHTRELEASE",0x00080000},
{"MOUSE_FLAG_MIDDLERELEASE",0x00040000},
{"MOUSE_FLAG_LEFTRELEASE",0x00020000},
{"MOUSE_FLAG_WHEEL_FLIP",0x00010000},   // invert direction of mouse wheel
{"MOUSE_FLAG_WHEEL_SKIP",0x00008000},   // look at next 2 rect for mouse wheel commands
{"MOUSE_FLAG_WHEEL_UP",0x00004000},
{"MOUSE_FLAG_WHEEL_DOWN",0x00002000}
};

static class PMDG_DATA_TABLE
{
public:
	long size;
	const char * szClientDataName;
	char* szClientTypeName;
	unsigned int endOffset;
	
};

static std::vector<PMDG_DATA_TABLE> PMDGDataTable{
{sizeof(unsigned char),	"IRS_DisplaySelector", "unsigned char"},				// Positions 0..4 0x0
{sizeof(bool),	"IRS_SysDisplay_R", "bool"},					// false: L  true: R 0x1
{sizeof(bool),	"IRS_annunGPS", "bool"},						//0x2
{sizeof(bool),	"IRS_annunALIGN[1]", "bool"},						//x03
{ sizeof(bool),	"IRS_annunALIGN[2]", "bool" },
{sizeof(bool),	"IRS_annunON_DC[1]", "bool"},						//0x5
{ sizeof(bool),	"IRS_annunON_DC[2]", "bool" },
{sizeof(bool),	"IRS_annunFAULT[1]", "bool"},						//0x7
{ sizeof(bool),	"IRS_annunFAULT[2]", "bool" },
{sizeof(bool),	"IRS_annunDC_FAIL[1]", "bool"},						//09
{ sizeof(bool),	"IRS_annunDC_FAIL[2]", "bool" },
{sizeof(unsigned char),	"IRS_ModeSelector[1]", "unsigned char"},					// 0: OFF  1: ALIGN  2: NAV  3: ATT//0xb
{ sizeof(unsigned char),	"IRS_ModeSelector[2]", "unsigned char" },

														// PSEU
{sizeof(bool),	"WARN_annunPSEU", "bool"},						//0xd

													// Service Interphone
{sizeof(bool),	"COMM_ServiceInterphoneSw", "bool"},//0xe

										 // Lights
{sizeof(unsigned char),	"LTS_DomeWhiteSw", "unsigned char"},					// 0: DIM  1: OFF  2: BRIGHT 0xf

													// Engine
{sizeof(bool),	"ENG_EECSwitch[1]", "bool"},//0x10
{ sizeof(bool),	"ENG_EECSwitch[2]", "bool" },//0x10
{sizeof(bool),	"ENG_annunREVERSER[1]", "bool"},//0x12
{ sizeof(bool),	"ENG_annunREVERSER[2]", "bool" },//0x12
{sizeof(bool),	"ENG_annunENGINE_CONTROL[1]", "bool"},//0x14
{ sizeof(bool),	"ENG_annunENGINE_CONTROL[2]", "bool" },//0x14
{sizeof(bool),	"ENG_annunALTN[1]", "bool"},//0x16
{ sizeof(bool),	"ENG_annunALTN[2]", "bool" },//0x16

								 // Oxygen
{sizeof(unsigned char),	"OXY_Needle", "unsigned char"},							// Position 0...240 0x18
{sizeof(bool),	"OXY_SwNormal", "bool"},						// true: NORMAL  false: ON 0x19
{sizeof(bool),	"OXY_annunPASS_OXY_ON", "bool"}, //0x1a

									  // Gear
{sizeof(bool),	"GEAR_annunOvhdLEFT", "bool"}, //0x1b
{sizeof(bool),	"GEAR_annunOvhdNOSE", "bool"}, //0x1c
{sizeof(bool),	"GEAR_annunOvhdRIGHT", "bool"}, //0x1d

									 // Flight recorder
{sizeof(bool),	"FLTREC_SwNormal", "bool"},					// true: NORMAL  false: TEST 0x1e
{sizeof(bool),	"FLTREC_annunOFF", "bool"}, //0x1f


								 // Forward overhead
								 //------------------------------------------

								 // Flight Controls
{sizeof(unsigned char),	"FCTL_FltControl_Sw[1]", "unsigned char"},				// 0: STBY/RUD  1: OFF  2: ON //0x20
{ sizeof(unsigned char),	"FCTL_FltControl_Sw[2]", "unsigned char" },
{sizeof(bool),	"FCTL_Spoiler_Sw[1]", "bool"},					// true: ON  false: OFF  
{ sizeof(bool),	"FCTL_Spoiler_Sw[2]", "bool" },
{sizeof(bool),	"FCTL_YawDamper_Sw", "bool"},
{sizeof(bool),	"FCTL_AltnFlaps_Sw_ARM", "bool"},				// true: ARM  false: OFF
{sizeof(unsigned char),	"FCTL_AltnFlaps_Control_Sw", "unsigned char"},			// 0: UP  1: OFF  2: DOWN
{sizeof(bool),	"FCTL_annunFC_LOW_PRESSURE[1]", "bool"},		// FLT CONTROL
{ sizeof(bool),	"FCTL_annunFC_LOW_PRESSURE[2]", "bool" },
{sizeof(bool),	"FCTL_annunYAW_DAMPER", "bool"},
{sizeof(bool),	"FCTL_annunLOW_QUANTITY", "bool"},
{sizeof(bool),	"FCTL_annunLOW_PRESSURE", "bool"},
{sizeof(bool),	"FCTL_annunLOW_STBY_RUD_ON", "bool"},
{sizeof(bool),	"FCTL_annunFEEL_DIFF_PRESS", "bool"},
{sizeof(bool),	"FCTL_annunSPEED_TRIM_FAIL", "bool"},
{sizeof(bool),	"FCTL_annunMACH_TRIM_FAIL", "bool"},
{sizeof(bool),	"FCTL_annunAUTO_SLAT_FAIL", "bool"},	//0x30

											// Navigation/Displays
{sizeof(unsigned char),	"NAVDIS_VHFNavSelector", "unsigned char"},				// 0: BOTH ON 1  1: NORMAL  2: BOTH ON 2
{sizeof(unsigned char),	"NAVDIS_IRSSelector", "unsigned char"},					// 0: BOTH ON L  1: NORMAL  2: BOTH ON R
{sizeof(unsigned char),	"NAVDIS_FMCSelector", "unsigned char"},					// 0: BOTH ON L  1: NORMAL  2: BOTH ON R
{sizeof(unsigned char),	"NAVDIS_SourceSelector", "unsigned char"},				// 0: ALL ON 1   1: AUTO    2: ALL ON 2
{sizeof(unsigned char),	"NAVDIS_ControlPaneSelector", "unsigned char"},			// 0: BOTH ON 1  1: NORMAL  2: BOTH ON 2

													// Fuel
{sizeof(float),	"FUEL_FuelTempNeedle", "float"},				// Value
{sizeof(bool),	"FUEL_CrossFeedSw", "bool"},
{sizeof(bool),	"FUEL_PumpFwdSw[1]", "bool"},					// left fwd / right fwd
{ sizeof(bool),	"FUEL_PumpFwdSw[2]", "bool" },
{sizeof(bool),	"FUEL_PumpAftSw[1]", "bool"},					// left aft / right aft
{ sizeof(bool),	"FUEL_PumpAftSw[2]", "bool" },
{sizeof(bool),	"FUEL_PumpCtrSw[1]", "bool"},					// ctr left / ctr right
{ sizeof(bool),	"FUEL_PumpCtrSw[2]", "bool" },
{sizeof(bool),	"FUEL_annunENG_VALVE_CLOSED[1]", "bool"}, //0x41
{ sizeof(bool),	"FUEL_annunENG_VALVE_CLOSED[2]", "bool" }, //0x41
{sizeof(bool),	"FUEL_annunSPAR_VALVE_CLOSED[1]", "bool"},
{ sizeof(bool),	"FUEL_annunSPAR_VALVE_CLOSED[2]", "bool" },
{sizeof(bool),	"FUEL_annunFILTER_BYPASS[1]", "bool"},
{ sizeof(bool),	"FUEL_annunFILTER_BYPASS[2]", "bool" },
{sizeof(unsigned char),	"FUEL_annunXFEED_VALVE_OPEN", "unsigned char"},			// 0: Closed  1: Open  2: In transit (dim)
{sizeof(bool),	"FUEL_annunLOWPRESS_Fwd[1]", "bool"},
{ sizeof(bool),	"FUEL_annunLOWPRESS_Fwd[2]", "bool" },
{sizeof(bool),	"FUEL_annunLOWPRESS_Aft[1]", "bool"},
{ sizeof(bool),	"FUEL_annunLOWPRESS_Aft[2]", "bool" },
{sizeof(bool),	"FUEL_annunLOWPRESS_Ctr[1]", "bool"},
{ sizeof(bool),	"FUEL_annunLOWPRESS_Ctr[2]", "bool" },

// Electrical
{sizeof(bool),	"ELEC_annunBAT_DISCHARGE", "bool"},
{sizeof(bool),	"ELEC_annunTR_UNIT", "bool"},
{sizeof(bool),	"ELEC_annunELEC", "bool"}, //0x50
{sizeof(unsigned char),	"ELEC_DCMeterSelector", "unsigned char"},				// 0: STBY PWR  1: BAT BUS ... 7: TEST
{sizeof(unsigned char),	"ELEC_ACMeterSelector", "unsigned char"},				// 0: STBY PWR  1: GND PWR ... 6: TEST
{sizeof(unsigned char),	"ELEC_BatSelector", "unsigned char"},					// 0: OFF  1: BAT  2: ON
{sizeof(bool),	"ELEC_CabUtilSw", "bool"},
{sizeof(bool),	"ELEC_IFEPassSeatSw", "bool"},
{sizeof(bool),	"ELEC_annunDRIVE[1]", "bool"},
{ sizeof(bool),	"ELEC_annunDRIVE[2]", "bool" },
{sizeof(bool),	"ELEC_annunSTANDBY_POWER_OFF", "bool"},
{sizeof(bool),	"ELEC_IDGDisconnectSw[1]", "bool"},
{ sizeof(bool),	"ELEC_IDGDisconnectSw[2]", "bool" },
{sizeof(unsigned char),	"ELEC_StandbyPowerSelector", "unsigned char"},			// 0: BAT  1: OFF  2: AUTO
{sizeof(bool),	"ELEC_annunGRD_POWER_AVAILABLE", "bool"},
{sizeof(bool),	"ELEC_GrdPwrSw", "bool"},
{sizeof(bool),	"ELEC_BusTransSw_AUTO", "bool"},
{sizeof(bool),	"ELEC_GenSw[1]", "bool"},
{ sizeof(bool),	"ELEC_GenSw[2]", "bool" },
{sizeof(bool),	"ELEC_APUGenSw[1]", "bool"}, //0x61
{ sizeof(bool),	"ELEC_APUGenSw[2]", "bool" }, //0x61
{sizeof(bool),	"ELEC_annunTRANSFER_BUS_OFF[1]", "bool"},
{ sizeof(bool),	"ELEC_annunTRANSFER_BUS_OFF[2]", "bool" },
{sizeof(bool),	"ELEC_annunSOURCE_OFF[1]", "bool"},
{ sizeof(bool),	"ELEC_annunSOURCE_OFF[2]", "bool" },
{sizeof(bool),	"ELEC_annunGEN_BUS_OFF[1]", "bool"},
{ sizeof(bool),	"ELEC_annunGEN_BUS_OFF[2]", "bool" },
{sizeof(bool),	"ELEC_annunAPU_GEN_OFF_BUS", "bool"},

// APU
{sizeof(float),	"APU_EGTNeedle", "float"},				// Value //0x6c
{sizeof(bool),	"APU_annunMAINT", "bool"},
{sizeof(bool),	"APU_annunLOW_OIL_PRESSURE", "bool"},
{sizeof(bool),	"APU_annunFAULT", "bool"}, //0x70
{sizeof(bool),	"APU_annunOVERSPEED", "bool"},

// Wipers
{sizeof(unsigned char),	"OH_WiperLSelector", "unsigned char"},			// 0: PARK  1: INT  2: LOW  3:HIGH
{sizeof(unsigned char),	"OH_WiperRSelector", "unsigned char"},			// 0: PARK  1: INT  2: LOW  3:HIGH

											// Center overhead controls & indicators
{sizeof(unsigned char),	"LTS_CircuitBreakerKnob", "unsigned char"},		// Position 0...150
{sizeof(unsigned char),	"LTS_OvereadPanelKnob", "unsigned char"},		// Position 0...150
{sizeof(bool),	"AIR_EquipCoolingSupplyNORM", "bool"}, //0x76
{sizeof(bool),	"AIR_EquipCoolingExhaustNORM", "bool"},
{sizeof(bool),	"AIR_annunEquipCoolingSupplyOFF", "bool"},
{sizeof(bool),	"AIR_annunEquipCoolingExhaustOFF", "bool"},
{sizeof(bool),	"LTS_annunEmerNOT_ARMED", "bool"},
{sizeof(unsigned char),	"LTS_EmerExitSelector", "unsigned char"},		// 0: OFF  1: ARMED  2: ON
{sizeof(unsigned char),	"COMM_NoSmokingSelector", "unsigned char"},		// 0: OFF  1: AUTO   2: ON
{sizeof(unsigned char),	"COMM_FastenBeltsSelector", "unsigned char"},	// 0: OFF  1: AUTO   2: ON
{sizeof(bool),	"COMM_annunCALL", "bool"},
{sizeof(bool),	"COMM_annunPA_IN_USE", "bool"},

// Anti-ice
{sizeof(bool),	"ICE_annunOVERHEAT[1]", "bool"}, //0x82
{ sizeof(bool),	"ICE_annunOVERHEAT[2]", "bool" }, //0x82
{ sizeof(bool),	"ICE_annunOVERHEAT[3]", "bool" }, //0x82
{ sizeof(bool),	"ICE_annunOVERHEAT[4]", "bool" }, //0x82
{sizeof(bool),	"ICE_annunON[1]", "bool"},
{ sizeof(bool),	"ICE_annunON[2]", "bool" },
{ sizeof(bool),	"ICE_annunON[3]", "bool" },
{ sizeof(bool),	"ICE_annunON[4]", "bool" },
{sizeof(bool),	"ICE_WindowHeatSw[1]", "bool"},
{ sizeof(bool),	"ICE_WindowHeatSw[2]", "bool" },
{ sizeof(bool),	"ICE_WindowHeatSw[3]", "bool" },
{ sizeof(bool),	"ICE_WindowHeatSw[4]", "bool" },
{sizeof(bool),	"ICE_annunCAPT_PITOT", "bool"},
{sizeof(bool),	"ICE_annunL_ELEV_PITOT", "bool"},
{sizeof(bool),	"ICE_annunL_ALPHA_VANE", "bool"},
{sizeof(bool),	"ICE_annunL_TEMP_PROBE", "bool"},
{sizeof(bool),	"ICE_annunFO_PITOT", "bool"}, //0x90
{sizeof(bool),	"ICE_annunR_ELEV_PITOT", "bool"},
{sizeof(bool),	"ICE_annunR_ALPHA_VANE", "bool"},
{sizeof(bool),	"ICE_annunAUX_PITOT", "bool"},
{sizeof(bool),	"ICE_ProbeHeatSw[1]", "bool"},
{ sizeof(bool),	"ICE_ProbeHeatSw[2]", "bool" },
{sizeof(bool),	"ICE_annunVALVE_OPEN[1]", "bool"},
{ sizeof(bool),	"ICE_annunVALVE_OPEN[2]", "bool" },
{sizeof(bool),	"ICE_annunCOWL_ANTI_ICE[1]", "bool"},
{ sizeof(bool),	"ICE_annunCOWL_ANTI_ICE[2]", "bool" },
{sizeof(bool),	"ICE_annunCOWL_VALVE_OPEN[1]", "bool"},
{ sizeof(bool),	"ICE_annunCOWL_VALVE_OPEN[2]", "bool" },
{sizeof(bool),	"ICE_WingAntiIceSw", "bool"},
{sizeof(bool),	"ICE_EngAntiIceSw[1]", "bool"},
{ sizeof(bool),	"ICE_EngAntiIceSw[2]", "bool" },

// Hydraulics
{sizeof(bool),	"HYD_annunLOW_PRESS_eng[1]", "bool"},
{ sizeof(bool),	"HYD_annunLOW_PRESS_eng[2]", "bool" },
{sizeof(bool),	"HYD_annunLOW_PRESS_elec[1]", "bool"}, //0xa1
{ sizeof(bool),	"HYD_annunLOW_PRESS_elec[2]", "bool" }, //0xa1
{sizeof(bool),	"HYD_annunOVERHEAT_elec[1]", "bool"},
{ sizeof(bool),	"HYD_annunOVERHEAT_elec[2]", "bool" },
{sizeof(bool),	"HYD_PumpSw_eng[1]", "bool"},
{ sizeof(bool),	"HYD_PumpSw_eng[2]", "bool" },
{sizeof(bool),	"HYD_PumpSw_elec[1]", "bool"},
{ sizeof(bool),	"HYD_PumpSw_elec[2]", "bool" },

// Air systems
{sizeof(unsigned char),	"AIR_TempSourceSelector", "unsigned char"},				// Positions 0..6
{sizeof(bool),	"AIR_TrimAirSwitch", "bool"},
{sizeof(bool),	"AIR_annunZoneTemp[1]", "bool"},
{ sizeof(bool),	"AIR_annunZoneTemp[2]", "bool" },
{ sizeof(bool),	"AIR_annunZoneTemp[3]", "bool" },
{sizeof(bool),	"AIR_annunDualBleed", "bool"},
{sizeof(bool),	"AIR_annunRamDoorL", "bool"},
{sizeof(bool),	"AIR_annunRamDoorR", "bool"},	//0xb0	
{ sizeof(bool),	"AIR_RecircFanSwitch[1]", "bool" },
{sizeof(bool),	"AIR_RecircFanSwitch[2]", "bool"},
{sizeof(unsigned char  ), "AIR_PackSwitch[1]", "unsigned char  "},					// 0=OFF  1=AUTO  2=HIGH
{ sizeof(unsigned char), "AIR_PackSwitch[2]", "unsigned char  " },
{sizeof(bool),	"AIR_BleedAirSwitch[1]", "bool"},
{ sizeof(bool),	"AIR_BleedAirSwitch[2]", "bool" },
{sizeof(bool),	"AIR_APUBleedAirSwitch", "bool"},
{sizeof(unsigned char),	"AIR_IsolationValveSwitch", "unsigned char"},			// 0=CLOSE  1=AUTO  2=OPEN
{sizeof(bool),	"AIR_annunPackTripOff[1]", "bool"},
{ sizeof(bool),	"AIR_annunPackTripOff[2]", "bool" },
{ sizeof(bool),	"AIR_annunWingBodyOverheat[1]", "bool" },
{sizeof(bool),	"AIR_annunWingBodyOverheat[2]", "bool"},
{sizeof(bool),	"AIR_annunBleedTripOff[1]", "bool"},
{ sizeof(bool),	"AIR_annunBleedTripOff[2]", "bool" },
{sizeof(unsigned int),	"AIR_FltAltWindow", "unsigned int"},
{sizeof(unsigned int),	"AIR_LandAltWindow", "unsigned int"},	//0xc3	
{sizeof(unsigned int),	"AIR_OutflowValveSwitch", "unsigned int"},				// 0=CLOSE  1=NEUTRAL  2=OPEN
{sizeof(unsigned int),	"AIR_PressurizationModeSelector", "unsigned int"},		// 0=AUTO  1=ALTN  2=MAN

													// Bottom overhead
{sizeof(unsigned char),	"LTS_LandingLtRetractableSw[1]", "unsigned char"},		// 0: RETRACT  1: EXTEND  2: ON
{ sizeof(unsigned char),	"LTS_LandingLtRetractableSw[2]", "unsigned char" },
{ sizeof(bool),	"LTS_LandingLtFixedSw[1]", "bool" }, //0xd1
{sizeof(bool),	"LTS_LandingLtFixedSw[2]", "bool"}, //0xd1
{sizeof(bool),	"LTS_RunwayTurnoffSw[1]", "bool"},
{ sizeof(bool),	"LTS_RunwayTurnoffSw[2]", "bool" },
{sizeof(bool),	"LTS_TaxiSw", "bool"},
{sizeof(unsigned char),	"APU_Selector", "unsigned char"},						// 0: OFF  1: ON  2: START
{sizeof(unsigned char),	"ENG_StartSelector[1]", "unsigned char"},				// 0: GRD  1: OFF  2: CONT  3: FLT
{ sizeof(unsigned char),	"ENG_StartSelector[2]", "unsigned char" },
{sizeof(unsigned char),	"ENG_IgnitionSelector", "unsigned char"},				// 0: IGN L  1: BOTH  2: IGN R
{sizeof(bool),	"LTS_LogoSw", "bool"},
{sizeof(unsigned char),	"LTS_PositionSw", "unsigned char"},						// 0: STEADY  1: OFF  2: STROBE&STEADY
{sizeof(bool),	"LTS_AntiCollisionSw", "bool"},
{sizeof(bool),	"LTS_WingSw", "bool"},
{sizeof(bool),	"LTS_WheelWellSw", "bool"},


// Glareshield
//------------------------------------------

// Warnings
{sizeof(bool),	"WARN_annunFIRE_WARN[1]", "bool"},
{ sizeof(bool),	"WARN_annunFIRE_WARN[2]", "bool" },
{sizeof(bool),	"WARN_annunMASTER_CAUTION[1]", "bool"}, //0xe1
{ sizeof(bool),	"WARN_annunMASTER_CAUTION[2]", "bool" }, //0xe1
{sizeof(bool),	"WARN_annunFLT_CONT", "bool"},
{sizeof(bool),	"WARN_annunIRS", "bool"},
{sizeof(bool),	"WARN_annunFUEL", "bool"},
{sizeof(bool),	"WARN_annunELEC", "bool"},
{sizeof(bool),	"WARN_annunAPU", "bool"},
{sizeof(bool),	"WARN_annunOVHT_DET", "bool"},
{sizeof(bool),	"WARN_annunANTI_ICE", "bool"},
{sizeof(bool),	"WARN_annunHYD", "bool"},
{sizeof(bool),	"WARN_annunDOORS", "bool"},
{sizeof(bool),	"WARN_annunENG", "bool"},
{sizeof(bool),	"WARN_annunOVERHEAD", "bool"},
{sizeof(bool),	"WARN_annunAIR_COND", "bool"},

// EFIS control panels
{ sizeof(bool),	"EFIS_MinsSelBARO[1]", "bool" },
{sizeof(bool),	"EFIS_MinsSelBARO[2]", "bool"},
{sizeof(bool),	"EFIS_BaroSelHPA[1]", "bool"},//0xf1
{ sizeof(bool),	"EFIS_BaroSelHPA[2]", "bool" },//0xf1
{sizeof(unsigned char),	"EFIS_VORADFSel1[1]", "unsigned char"},					// 0: VOR  1: OFF  2: ADF
{ sizeof(unsigned char),	"EFIS_VORADFSel1[2]", "unsigned char" },
{sizeof(unsigned char),	"EFIS_VORADFSel2[1]", "unsigned char"},					// 0: VOR  1: OFF  2: ADF
{ sizeof(unsigned char),	"EFIS_VORADFSel2[2]", "unsigned char" },
{sizeof(unsigned char),	"EFIS_ModeSel[1]", "unsigned char"},					// 0: APP  1: VOR  2: MAP  3: PLAn
{ sizeof(unsigned char),	"EFIS_ModeSel[2]", "unsigned char" },
{sizeof(unsigned char),	"EFIS_RangeSel[1]", "unsigned char"},					// 0: 5 ... 7: 640
{ sizeof(unsigned char),	"EFIS_RangeSel[2]", "unsigned char" },

													// Mode control panel
{sizeof(unsigned short),	"MCP_Course[1]", "unsigned short"},
{ sizeof(unsigned short),	"MCP_Course[2]", "unsigned short" },
{sizeof(float),	"MCP_IASMach", "float"},						// Mach if < 10.0
{sizeof(bool),	"MCP_IASBlank", "bool"}, //0x103
{sizeof(bool),	"MCP_IASOverspeedFlash", "bool"},
{sizeof(bool),	"MCP_IASUnderspeedFlash", "bool"},
{sizeof(unsigned short),	"MCP_Heading", "unsigned short"},
{sizeof(unsigned short),	"MCP_Altitude", "unsigned short"},
{sizeof(short),	"MCP_VertSpeed", "short"},
{sizeof(bool),	"MCP_VertSpeedBlank", "bool"},
{sizeof(bool),	"MCP_FDSw[1]", "bool"},
{ sizeof(bool),	"MCP_FDSw[2]", "bool" },
{sizeof(bool),	"MCP_ATArmSw", "bool"},
{sizeof(unsigned char),	"MCP_BankLimitSel", "unsigned char"},					// 0: 10 ... 4: 30   //0x110
{sizeof(bool),	"MCP_DisengageBar", "bool"},
{sizeof(bool),	"MCP_annunFD[1]", "bool"},
{ sizeof(bool),	"MCP_annunFD[2]", "bool" },
{sizeof(bool),	"MCP_annunATArm", "bool"},
{sizeof(bool),	"MCP_annunN1", "bool"},
{sizeof(bool),	"MCP_annunSPEED", "bool"},
{sizeof(bool),	"MCP_annunVNAV", "bool"},
{sizeof(bool),	"MCP_annunLVL_CHG", "bool"},
{sizeof(bool),	"MCP_annunHDG_SEL", "bool"},
{sizeof(bool),	"MCP_annunLNAV", "bool"},
{sizeof(bool),	"MCP_annunVOR_LOC", "bool"},
{sizeof(bool),	"MCP_annunAPP", "bool"},
{sizeof(bool),	"MCP_annunALT_HOLD", "bool"},
{sizeof(bool),	"MCP_annunVS", "bool"},
{sizeof(bool),	"MCP_annunCMD_A", "bool"},
{sizeof(bool),	"MCP_annunCWS_A", "bool"}, //0x120
{sizeof(bool),	"MCP_annunCMD_B", "bool"},
{sizeof(bool),	"MCP_annunCWS_B", "bool"},

// Forward panel
{sizeof(bool		),	"MAIN_NoseWheelSteeringSwNORM", "bool		"},		// false: ALT
{sizeof(bool),	"MAIN_annunBELOW_GS[1]", "bool"},
{ sizeof(bool),	"MAIN_annunBELOW_GS[2]", "bool" },
{sizeof(unsigned char),	"MAIN_MainPanelDUSel[1]", "unsigned char"},				// 0: OUTBD PFD ... 4 MFD for Capt; reverse sequence for FO
{ sizeof(unsigned char),	"MAIN_MainPanelDUSel[2]", "unsigned char" },
{sizeof(unsigned char),	"MAIN_LowerDUSel[1]", "unsigned char"},					// 0: ENG PRI ... 2 ND for Capt; reverse sequence for FO
{ sizeof(unsigned char),	"MAIN_LowerDUSel[2]", "unsigned char" },
{sizeof(bool),	"MAIN_annunAP[1]", "bool"},					// Red color. See MAIN_annunAP_Amber for amber color (added to the bottom of the struct)
{ sizeof(bool),	"MAIN_annunAP[2]", "bool" },
{sizeof(bool),	"MAIN_annunAT[1]", "bool"},					// Red color. See MAIN_annunAT_Amber for amber color (added to the bottom of the struct)
{ sizeof(bool),	"MAIN_annunAT[2]", "bool" },
{ sizeof(bool),	"MAIN_annunFMC[1]", "bool" },
{sizeof(bool),	"MAIN_annunFMC[2]", "bool"},
{sizeof(unsigned char),	"MAIN_DisengageTestSelector[1]", "unsigned char"},			// 0: 1  1: OFF  2: 2 //0x130
{ sizeof(unsigned char),	"MAIN_DisengageTestSelector[2]", "unsigned char" },
{sizeof(bool),	"MAIN_annunSPEEDBRAKE_ARMED", "bool"},  //
{sizeof(bool),	"MAIN_annunSPEEDBRAKE_DO_NOT_ARM", "bool"},
{sizeof(bool),	"MAIN_annunSPEEDBRAKE_EXTENDED", "bool"},
{sizeof(bool),	"MAIN_annunSTAB_OUT_OF_TRIM", "bool"},
{sizeof(unsigned char),	"MAIN_LightsSelector", "unsigned char"},				// 0: TEST  1: BRT  2: DIM
{sizeof(bool),	"MAIN_RMISelector1_VOR", "bool"},
{sizeof(bool),	"MAIN_RMISelector2_VOR", "bool"},
{sizeof(unsigned char),	"MAIN_N1SetSelector", "unsigned char"},					// 0: 2  1: 1  2: AUTO  3: BOTH
{sizeof(unsigned char),	"MAIN_SpdRefSelector", "unsigned char"},				// 0: SET  1: AUTO  2: V1  3: VR  4: WT  5: VREF  6: Bug  
{sizeof(unsigned char),	"MAIN_FuelFlowSelector", "unsigned char"},				// 0: RESET  1: RATE  2: USED
{sizeof(unsigned char),	"MAIN_AutobrakeSelector", "unsigned char"},				// 0: RTO  1: OFF ... 5: MAX
{sizeof(bool),	"MAIN_annunANTI_SKID_INOP", "bool"},
{sizeof(bool),	"MAIN_annunAUTO_BRAKE_DISARM", "bool"},
{sizeof(bool),	"MAIN_annunLE_FLAPS_TRANSIT", "bool"},
{sizeof(bool),	"MAIN_annunLE_FLAPS_EXT", "bool"},  //0x140
{sizeof(float),	"MAIN_TEFlapsNeedle[1]", "float[]"},				// Value
{ sizeof(float),	"MAIN_TEFlapsNeedle[2]", "float[]" },
{sizeof(bool),	"MAIN_annunGEAR_transit[1]", "bool"},
{ sizeof(bool),	"MAIN_annunGEAR_transit[2]", "bool" },
{ sizeof(bool),	"MAIN_annunGEAR_transit[3]", "bool" },
{sizeof(bool),	"MAIN_annunGEAR_locked[1]", "bool"},
{ sizeof(bool),	"MAIN_annunGEAR_locked[2]", "bool" },
{ sizeof(bool),	"MAIN_annunGEAR_locked[3]", "bool" },
{sizeof(unsigned char),	"MAIN_GearLever", "unsigned char"},						// 0: UP  1: OFF  2: DOWN //0x150
{sizeof(float),	"MAIN_BrakePressNeedle", "float"},				// Value
{sizeof(bool),	"HGS_annun_AIII", "bool"},
{sizeof(bool),	"HGS_annun_NO_AIII", "bool"},
{sizeof(bool),	"HGS_annun_FLARE", "bool"},
{sizeof(bool),	"HGS_annun_RO", "bool"},
{sizeof(bool),	"HGS_annun_RO_CTN", "bool"},
{sizeof(bool),	"HGS_annun_RO_ARM", "bool"},
{sizeof(bool),	"HGS_annun_TO", "bool"},
{sizeof(bool),	"HGS_annun_TO_CTN", "bool"},
{sizeof(bool),	"HGS_annun_APCH", "bool"},
{sizeof(bool),	"HGS_annun_TO_WARN", "bool"},
{sizeof(bool),	"HGS_annun_Bar", "bool"},
{sizeof(bool),	"HGS_annun_FAIL", "bool"}, //0x160

								// Lower forward panel
								//------------------------------------------
{sizeof(unsigned char),	"LTS_MainPanelKnob[1]", "unsigned char"},				// Position 0...150
{ sizeof(unsigned char),	"LTS_MainPanelKnob[2]", "unsigned char" },
{sizeof(unsigned char),	"LTS_BackgroundKnob", "unsigned char"},					// Position 0...150
{sizeof(unsigned char),	"LTS_AFDSFloodKnob", "unsigned char"},					// Position 0...150
{sizeof(unsigned char),	"LTS_OutbdDUBrtKnob[1]", "unsigned char"},				// Position 0...127
{ sizeof(unsigned char),	"LTS_OutbdDUBrtKnob[2]", "unsigned char" },
{sizeof(unsigned char),	"LTS_InbdDUBrtKnob[1]", "unsigned char"},				// Position 0...127
{ sizeof(unsigned char),	"LTS_InbdDUBrtKnob[2]", "unsigned char" },
{sizeof(unsigned char),	"LTS_InbdDUMapBrtKnob[1]", "unsigned char"},			// Position 0...127
{ sizeof(unsigned char),	"LTS_InbdDUMapBrtKnob[2]", "unsigned char" },
{sizeof(unsigned char),	"LTS_UpperDUBrtKnob", "unsigned char"},					// Position 0...127
{sizeof(unsigned char),	"LTS_LowerDUBrtKnob", "unsigned char"},					// Position 0...127
{sizeof(unsigned char),	"LTS_LowerDUMapBrtKnob", "unsigned char"},				// Position 0...127
{sizeof(bool),	"GPWS_annunINOP", "bool"},
{sizeof(bool),	"GPWS_FlapInhibitSw_NORM", "bool"},
{sizeof(bool),	"GPWS_GearInhibitSw_NORM", "bool"}, //0x170
{sizeof(bool),	"GPWS_TerrInhibitSw_NORM", "bool"},


// Control Stand
{sizeof(bool		),	"CDU_annunEXEC[1]", "bool		"},
{ sizeof(bool),	"CDU_annunEXEC[2]", "bool		" },
{sizeof(bool),	"CDU_annunCALL[1]", "bool"},
{ sizeof(bool),	"CDU_annunCALL[2]", "bool" },
{sizeof(bool),	"CDU_annunFAIL[1]", "bool"},
{ sizeof(bool),	"CDU_annunFAIL[2]", "bool" },
{sizeof(bool),	"CDU_annunMSG[1]", "bool"},
{ sizeof(bool),	"CDU_annunMSG[2]", "bool" },
{sizeof(bool),	"CDU_annunOFST[1]", "bool"},
{ sizeof(bool),	"CDU_annunOFST[2]", "bool" },
{sizeof(unsigned char),	"CDU_BrtKnob[1]", "unsigned char"},						// Position 0...127
{ sizeof(unsigned char),	"CDU_BrtKnob[2]", "unsigned char" },
{sizeof(bool),	"TRIM_StabTrimMainElecSw_NORMAL", "bool"},
{sizeof(bool),	"TRIM_StabTrimAutoPilotSw_NORMAL", "bool"},
{sizeof(bool),	"PED_annunParkingBrake", "bool"}, //0x180
{sizeof(unsigned char),	"FIRE_OvhtDetSw[1]", "unsigned char"},					// 0: A  1: NORMAL  2: B
{ sizeof(unsigned char),	"FIRE_OvhtDetSw[2]", "unsigned char" },
{sizeof(bool),	"FIRE_annunENG_OVERHEAT[1]", "bool"},
{ sizeof(bool),	"FIRE_annunENG_OVERHEAT[2]", "bool" },
{sizeof(unsigned char),	"FIRE_DetTestSw", "unsigned char"},						// 0: FAULT/INOP  1: neutral  2: OVHT/FIRE
{sizeof(unsigned char),	"FIRE_HandlePos[1]", "unsigned char"},					// 0: In  1: Blocked  2: Out  3: Turned Left  4: Turned right
{ sizeof(unsigned char),	"FIRE_HandlePos[2]", "unsigned char" },
{ sizeof(unsigned char),	"FIRE_HandlePos[3]", "unsigned char" },
{sizeof(bool),	"FIRE_HandleIlluminated[1]", "bool"},
{ sizeof(bool),	"FIRE_HandleIlluminated[2]", "bool" },
{ sizeof(bool),	"FIRE_HandleIlluminated[3]", "bool" },
{sizeof(bool),	"FIRE_annunWHEEL_WELL", "bool"},
{sizeof(bool),	"FIRE_annunFAULT", "bool"},
{sizeof(bool),	"FIRE_annunAPU_DET_INOP", "bool"},
{sizeof(bool),	"FIRE_annunAPU_BOTTLE_DISCHARGE", "bool"},
{sizeof(bool),	"FIRE_annunBOTTLE_DISCHARGE[1]", "bool"}, //0x190
{ sizeof(bool),	"FIRE_annunBOTTLE_DISCHARGE[2]", "bool" }, //0x190
{sizeof(unsigned char),	"FIRE_ExtinguisherTestSw", "unsigned char"},			// 0: 1  1: neutral  2: 2
{sizeof(bool),	"FIRE_annunExtinguisherTest[1]", "bool"},		// Left, Right, APU
{ sizeof(bool),	"FIRE_annunExtinguisherTest[2]", "bool" },
{ sizeof(bool),	"FIRE_annunExtinguisherTest[3]", "bool" },
{sizeof(bool),	"CARGO_annunExtTest[1]", "bool"},				// Fwd, Aft
{ sizeof(bool),	"CARGO_annunExtTest[2]", "bool" },
{sizeof(unsigned char),	"CARGO_DetSelect[1]", "unsigned char"},					// 0: A  1: ORM  2: B
{ sizeof(unsigned char),	"CARGO_DetSelect[2]", "unsigned char" },
{sizeof(bool),	"CARGO_ArmedSw[1]", "bool"},
{ sizeof(bool),	"CARGO_ArmedSw[2]", "bool" },
{sizeof(bool),	"CARGO_annunFWD", "bool"},
{sizeof(bool),	"CARGO_annunAFT", "bool"},
{sizeof(bool),	"CARGO_annunDETECTOR_FAULT", "bool"},
{sizeof(bool),	"CARGO_annunDISCH", "bool"},
{sizeof(bool),	"HGS_annunRWY", "bool"},
{sizeof(bool),	"HGS_annunGS", "bool"}, //0x1a0
{sizeof(bool),	"HGS_annunFAULT", "bool"},
{sizeof(bool),	"HGS_annunCLR", "bool"},
{sizeof(bool),	"XPDR_XpndrSelector_2", "bool"},				// false: 1  true: 2
{sizeof(bool),	"XPDR_AltSourceSel_2", "bool"},				// false: 1  true: 2
{sizeof(unsigned char),	"XPDR_ModeSel", "unsigned char"},						// 0: STBY  1: ALT RPTG OFF ... 4: TA/RA
{sizeof(bool),	"XPDR_annunFAIL", "bool"},
{sizeof(unsigned char),	"LTS_PedFloodKnob", "unsigned char"},					// Position 0...150
{sizeof(unsigned char),	"LTS_PedPanelKnob", "unsigned char"},					// Position 0...150
{sizeof(bool),	"TRIM_StabTrimSw_NORMAL", "bool"},
{sizeof(bool),	"PED_annunLOCK_FAIL", "bool"},
{sizeof(bool),	"PED_annunAUTO_UNLK", "bool"},
{sizeof(unsigned char),	"PED_FltDkDoorSel", "unsigned char"},					// 0: UNLKD  1 AUTO pushed in  2: AUTO  3: DENY


													// Additional variables: used by FS2Crew
{sizeof(bool),	"ENG_StartValve[1]", "bool"},					// true: valve open
{ sizeof(bool),	"ENG_StartValve[2]", "bool" },
{sizeof(float),	"AIR_DuctPress[1]", "float[]"},					// PSI
{ sizeof(float),	"AIR_DuctPress[2]", "float[]" },
{sizeof(unsigned char  ), "COMM_Attend_PressCount", "unsigned char"},				// incremented with each button press //0x1b7
{sizeof(unsigned char  ), "COMM_GrdCall_PressCount", "unsigned char"},			// incremented with each button press
{sizeof(unsigned char  ), "COMM_SelectedMic[1]", "unsigned char"},				// array: 0=capt, 1=F/O, 2=observer.
{ sizeof(unsigned char), "COMM_SelectedMic[2]", "unsigned char" },
{ sizeof(unsigned char), "COMM_SelectedMic[3]", "unsigned char" },
													// values: 0=VHF1  1=VHF2  2=VHF3  3=HF1  4=HF2  5=FLT  6=SVC  7=PA
{sizeof(float),	"FUEL_QtyCenter", "float"},						// LBS
{sizeof(float),	"FUEL_QtyLeft", "float"},						// LBS //0x1c0
{sizeof(float),	"FUEL_QtyRight", "float"},						// LBS
{sizeof(bool),	"IRS_aligned", "bool"},						// at least one IRU is aligned
{sizeof(unsigned char  ), "AircraftModel", "unsigned char"},						// 1: -600  2: -700  3: -700WL  4: -800  5: -800WL  6: -900  7: -900ER
{sizeof(bool),	"WeightInKg", "bool"},							// false: LBS  true: KG
{sizeof(bool),	"GPWS_V1CallEnabled", "bool"},					// GPWS V1 callout option enabled
{sizeof(bool),	"GroundConnAvailable", "bool"},				// can connect/disconnect ground air/electrics
{sizeof(unsigned char),	"FMC_TakeoffFlaps", "unsigned char"},					// degrees, 0 if not set
{sizeof(unsigned char),	"FMC_V1", "unsigned char"},								// knots, 0 if not set
{sizeof(unsigned char),	"FMC_VR", "unsigned char"},								// knots, 0 if not set
{sizeof(unsigned char),	"FMC_V2", "unsigned char"},								// knots, 0 if not set //0x0d0
{sizeof(unsigned char),	"FMC_LandingFlaps", "unsigned char"},					// degrees, 0 if not set
{sizeof(unsigned char),	"FMC_LandingVREF", "unsigned char"},					// knots, 0 if not set
{sizeof(unsigned short ), "FMC_CruiseAlt", "unsigned short"},						// ft, 0 if not set
{sizeof(short),	"FMC_LandingAltitude", "short"},				// ft; -32767 if not available
{sizeof(unsigned short), "FMC_TransitionAlt", "unsigned short"},					// ft
{sizeof(unsigned short), "FMC_TransitionLevel", "unsigned short"},				// ft
{sizeof(bool),	"FMC_PerfInputComplete", "bool"},
{sizeof(float),	"FMC_DistanceToTOD", "float"},					// nm; 0.0 if passed, negative if n/a
{sizeof(float),	"FMC_DistanceToDest", "float"},					// nm; negative if n/a //0x1e0
{sizeof(char[9]),	"FMC_flightNumber", "char"},
/*{ sizeof(char),	"FMC_flightNumber[2]", "char" },
{ sizeof(char),	"FMC_flightNumber[3]", "char" },
{ sizeof(char),	"FMC_flightNumber[4]", "char" },
{ sizeof(char),	"FMC_flightNumber[5]", "char" },
{ sizeof(char),	"FMC_flightNumber[6]", "char" },
{ sizeof(char),	"FMC_flightNumber[7]", "char" },
{ sizeof(char),	"FMC_flightNumber[8]", "char" },
{ sizeof(char),	"FMC_flightNumber[9]", "char" },*/

// New variables for SP2
{sizeof(unsigned int),	"COMM_ReceiverSwitches[1]", "unsigned int[]"},			// Bit flags for selector receivers (see ACP_SEL_RECV_VHF1 etc): [0]=Capt, [1]=FO, [2]=Overhead
{ sizeof(unsigned int),	"COMM_ReceiverSwitches[2]", "unsigned int[]" },
{ sizeof(unsigned int),	"COMM_ReceiverSwitches[3]", "unsigned int[]" },
{sizeof(bool),	"MAIN_annunAP_Amber[1]", "bool"},				// Amber color //0x1f9
{ sizeof(bool),	"MAIN_annunAP_Amber[2]", "bool" },
{sizeof(bool),	"MAIN_annunAT_Amber[1]", "bool"},				// Amber color
{ sizeof(bool),	"MAIN_annunAT_Amber[2]", "bool" },
{sizeof(int),	"ICE_WindowHeatTestSw", "int"},				// 0: OVHT  1: Neutral  2: PWR TEST
{sizeof(bool),	"DOOR_annunFWD_ENTRY", "bool"}, //0x201
{sizeof(bool),	"DOOR_annunFWD_SERVICE", "bool"},
{sizeof(bool),	"DOOR_annunAIRSTAIR", "bool"},
{sizeof(bool),	"DOOR_annunLEFT_FWD_OVERWING", "bool"},
{sizeof(bool),	"DOOR_annunRIGHT_FWD_OVERWING", "bool"},
{sizeof(bool),	"DOOR_annunFWD_CARGO", "bool"},
{sizeof(bool),	"DOOR_annunEQUIP", "bool"},
{sizeof(bool),	"DOOR_annunLEFT_AFT_OVERWING", "bool"},
{sizeof(bool),	"DOOR_annunRIGHT_AFT_OVERWING", "bool"},
{sizeof(bool),	"DOOR_annunAFT_CARGO", "bool"},
{sizeof(bool),	"DOOR_annunAFT_ENTRY", "bool"},
{sizeof(bool),	"DOOR_annunAFT_SERVICE", "bool"},
{sizeof(bool),	"AIR_annunAUTO_FAIL", "bool"},
{sizeof(bool),	"AIR_annunOFFSCHED_DESCENT", "bool"},
{sizeof(bool),	"AIR_annunALTN", "bool"},
{sizeof(bool),	"AIR_annunMANUAL", "bool"}, //0x210
{sizeof(float),	"AIR_CabinAltNeedle", "float"},				// Value - ft
{sizeof(float),	"AIR_CabinDPNeedle", "float"},				// Value - PSI
{sizeof(float),	"AIR_CabinVSNeedle", "float"},				// Value - ft/min
{sizeof(float),	"AIR_CabinValveNeedle", "float"},			// Value - 0 (closed) .. 1 (open)
{sizeof(float),	"AIR_TemperatureNeedle", "float"},			// Value - degrees C //0x224
{sizeof(float),	"AIR_DuctPressNeedle[1]", "float[]"},			// Value - degrees C
{ sizeof(float),	"AIR_DuctPressNeedle[2]", "float[]" },
{sizeof(char[13]),	"ELEC_MeterDisplayTop", "char"},		// Top line of the display: 3 groups of 4 digits (or symbols) + terminating zero //0x240
/*{ sizeof(char),	"ELEC_MeterDisplayTop[2]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[3]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[4]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[5]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[6]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[7]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[8]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[9]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[10]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[11]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[12]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayTop[13]", "char" },*/
{sizeof(char[13]),	"ELEC_MeterDisplayBottom", "char"},	// Bottom line of the display //0x24d
/*{ sizeof(char),	"ELEC_MeterDisplayBottom[2]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[3]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[4]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[5]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[6]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[7]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[8]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[9]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[10]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[11]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[12]", "char" },
{ sizeof(char),	"ELEC_MeterDisplayBottom[13]", "char" },*/
{sizeof(char[7]),	"IRS_DisplayLeft", "char"},				// Left display string, zero terminated //0x25a
/*{sizeof(char), "IRS_DisplayLeft[2]", "char"},
{sizeof(char), "IRS_DisplayLeft[3]", "char"},
{sizeof(char), "IRS_DisplayLeft[4]", "char"},
{sizeof(char), "IRS_DisplayLeft[5]", "char"},
{sizeof(char), "IRS_DisplayLeft[6]", "char"},
{sizeof(char), "IRS_DisplayLeft[7]", "char"},
{sizeof(char),	"IRS_DisplayRight[1]", "char"},	*/		// Right display string, zero terminated //0x261
{ sizeof(char[8]),	"IRS_DisplayRight", "char" },
/*{ sizeof(char),	"IRS_DisplayRight[3]", "char" },
{ sizeof(char),	"IRS_DisplayRight[4]", "char" },
{ sizeof(char),	"IRS_DisplayRight[5]", "char" },
{ sizeof(char),	"IRS_DisplayRight[6]", "char" },
{ sizeof(char),	"IRS_DisplayRight[7]", "char" },
{ sizeof(char),	"IRS_DisplayRight[8]", "char" },*/
{sizeof(bool),	"IRS_DisplayShowsDots", "bool"},			// True if the degrees and decimal dot symbols are shown on the IRS display //0x269


												// The rest of the controls and indicators match their standard FSX counterparts
												// and can be accessed using the standard SimConnect means.
{sizeof(unsigned char[156]), "reserved[156]", "unsigned char"}
};